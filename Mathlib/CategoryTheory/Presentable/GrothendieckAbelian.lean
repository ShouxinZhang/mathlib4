/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.CategoryTheory.Presentable.Basic
import Mathlib.CategoryTheory.Abelian.GrothendieckCategory
import Mathlib.CategoryTheory.Limits.TypesFiltered

/-!
# Morphisms to a colimit in a Grothendieck abelian category

Let `C : Type u` be an abelian category `[Category.{v} C]` which
satisfies `IsGrothendieckAbelian.{w} C`. Then, we may expect
that all objects `X : C` are `Œ∫`-presentable for some regular
cardinal `Œ∫`. However, we prove only a weaker result (which
should be enough in order to obtain the existence of enough
injectives): there is a regular cardinal `Œ∫` such that
if `Y : J ‚•§ C` is a functor from a `Œ∫`-filtered
category, and `c : Cocone Y` is a colimit cocone,
then the map from the colimit of `X ‚ü∂ Y j` to `X ‚ü∂ c.pt`
is injective, and bijective under the additional
assumption that for any map `f : j ‚ü∂ j'` in `J`, `Y.map f`
is a monomorphism.

-/

universe w v' v u' u

namespace CategoryTheory

open Limits Opposite

namespace IsCardinalFiltered

instance under (J : Type u) [Category.{v} J] (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]
    [IsCardinalFiltered J Œ∫] (j‚ÇÄ : J) : IsCardinalFiltered (Under j‚ÇÄ) Œ∫ where
  nonempty_cocone {A _} F hA := ‚ü®by
    have := isFiltered_of_isCardinalDirected J Œ∫
    let c := cocone (F ‚ãô Under.forget j‚ÇÄ) hA
    let x (a : A) : j‚ÇÄ ‚ü∂ IsFiltered.max j‚ÇÄ c.pt := (F.obj a).hom ‚â´ c.Œπ.app a ‚â´
      IsFiltered.rightToMax j‚ÇÄ c.pt
    have hŒ∫' : HasCardinalLT A Œ∫ := hasCardinalLT_of_hasCardinalLT_arrow hA
    exact
      { pt := Under.mk (toCoeq x hŒ∫')
        Œπ :=
          { app a := Under.homMk (c.Œπ.app a ‚â´ IsFiltered.rightToMax j‚ÇÄ c.pt ‚â´ coeqHom x hŒ∫')
              (by simpa [x] using coeq_condition x hŒ∫' a)
            naturality a b f := by
              ext
              have := c.w f
              dsimp at this ‚ä¢
              simp only [reassoc_of% this, Category.assoc, Category.comp_id]} }‚ü©

end IsCardinalFiltered

variable {C : Type u} [Category.{v} C] [Abelian C]

namespace Limits

variable (J : Type u') [Category.{v'} J] (X : C)

@[simps]
def constCocone : Cocone ((Functor.const J).obj X) where
  pt := X
  Œπ := ùüô _

noncomputable def constCoconeIsColimit [IsFiltered J] :
    IsColimit (constCocone J X) := by
  have : Nonempty J := IsFiltered.nonempty
  let j‚ÇÄ := Classical.arbitrary J
  exact
    { desc s := s.Œπ.app j‚ÇÄ
      fac s j := by
        have h‚ÇÅ := s.w (IsFiltered.leftToMax j‚ÇÄ j)
        have h‚ÇÇ := s.w (IsFiltered.rightToMax j‚ÇÄ j)
        dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢
        rw [‚Üê h‚ÇÅ, ‚Üê h‚ÇÇ, Category.id_comp]
      uniq s m hm := by simpa using hm j‚ÇÄ }

end Limits

namespace HasExactColimitsOfShape

variable {J : Type u'} [Category.{v'} J]
    [HasColimitsOfShape J C] [HasExactColimitsOfShape J C]
    {S : ShortComplex (J ‚•§ C)} (hS : S.Exact)
    {c‚ÇÅ : Cocone S.X‚ÇÅ} (hc‚ÇÅ : IsColimit c‚ÇÅ) {c‚ÇÇ : Cocone S.X‚ÇÇ} (hc‚ÇÇ : IsColimit c‚ÇÇ)
    {c‚ÇÉ : Cocone S.X‚ÇÉ} (hc‚ÇÉ : IsColimit c‚ÇÉ)
    (f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt) (g : c‚ÇÇ.pt ‚ü∂ c‚ÇÉ.pt)
    (hf : ‚àÄ j, c‚ÇÅ.Œπ.app j ‚â´ f = S.f.app j ‚â´ c‚ÇÇ.Œπ.app j)
    (hg : ‚àÄ j, c‚ÇÇ.Œπ.app j ‚â´ g = S.g.app j ‚â´ c‚ÇÉ.Œπ.app j)

variable (S c‚ÇÅ c‚ÇÇ c‚ÇÉ) in
@[simps]
def mapShortComplex : ShortComplex C :=
  ShortComplex.mk f g (hc‚ÇÅ.hom_ext (fun j ‚Ü¶ by
    dsimp
    rw [reassoc_of% (hf j), hg j, comp_zero, ‚Üê NatTrans.comp_app_assoc, S.zero,
      zero_app, zero_comp]))

include hc‚ÇÇ hc‚ÇÉ hS in
lemma mapShortComplex_exact : (mapShortComplex S c‚ÇÅ hc‚ÇÅ c‚ÇÇ c‚ÇÉ f g hf hg).Exact := by
  have := hc‚ÇÇ
  have := hc‚ÇÉ
  have := hS
  sorry

end HasExactColimitsOfShape

variable [IsGrothendieckAbelian.{w} C]

namespace IsGrothendieckAbelian

namespace IsPresentable

variable {X : C} {Œ∫ : Cardinal.{w}} [hŒ∫ : Fact Œ∫.IsRegular]
  (hXŒ∫ : HasCardinalLT (Subobject X) Œ∫)
  {J : Type w} [SmallCategory J]
  [IsCardinalFiltered J Œ∫] (Y : J ‚•§ C)

section injectivity

variable {Y} {c : Cocone Y} (hc : IsColimit c) {j‚ÇÄ : J}
  {y : X ‚ü∂ Y.obj j‚ÇÄ} (hy : y ‚â´ c.Œπ.app j‚ÇÄ = 0)

namespace injectivity‚ÇÄ

variable (y)

@[simps]
def Œ≥ : (Functor.const _).obj X ‚ü∂ Under.forget j‚ÇÄ ‚ãô Y where
  app t := y ‚â´ Y.map t.hom
  naturality t‚ÇÅ t‚ÇÇ f := by
    dsimp
    simp only [Category.id_comp, Category.assoc, ‚Üê Functor.map_comp, Under.w]

@[simps]
noncomputable def S : ShortComplex (Under j‚ÇÄ ‚•§ C) :=
  ShortComplex.mk _ _ (kernel.condition (Œ≥ y))

instance : Mono (S y).f := by dsimp; infer_instance

omit [IsGrothendieckAbelian C] in
lemma S_exact : (S y).Exact :=
  (S y).exact_of_f_is_kernel (kernelIsKernel _)

end injectivity‚ÇÄ

include hXŒ∫ hc hy

open injectivity‚ÇÄ in
lemma injectivity‚ÇÄ : ‚àÉ (j : J) (f : j‚ÇÄ ‚ü∂ j), y ‚â´ Y.map f = 0 := by
  have := isFiltered_of_isCardinalDirected J Œ∫
  have := hc
  have := hXŒ∫
  have := hy
  sorry

end injectivity

section surjectivity

variable {Y} {c : Cocone Y} (hc : IsColimit c)
  [‚àÄ (j j' : J) (œÜ : j ‚ü∂ j'), Mono (Y.map œÜ)] (z : X ‚ü∂ c.pt)

include hXŒ∫ hc

lemma surjectivity : ‚àÉ (j‚ÇÄ : J) (y : X ‚ü∂ Y.obj j‚ÇÄ), z = y ‚â´ c.Œπ.app j‚ÇÄ := by
  have := hXŒ∫
  have := hc
  sorry

end surjectivity

include hXŒ∫ in
lemma preservesColimit_of_mono [‚àÄ (j j' : J) (œÜ : j ‚ü∂ j'), Mono (Y.map œÜ)] :
    PreservesColimit Y ((coyoneda.obj (op X))) where
  preserves {c} hc := ‚ü®by
    have := isFiltered_of_isCardinalDirected J Œ∫
    exact Types.FilteredColimit.isColimitOf' _ _
      (surjectivity hXŒ∫ hc) (fun j‚ÇÄ y‚ÇÅ y‚ÇÇ hy ‚Ü¶ by
        dsimp at y‚ÇÅ y‚ÇÇ hy ‚ä¢
        rw [‚Üê sub_eq_zero, ‚Üê Preadditive.sub_comp] at hy
        obtain ‚ü®j, f, hf‚ü© := injectivity‚ÇÄ hXŒ∫ hc hy
        exact ‚ü®j, f, by simpa only [Preadditive.sub_comp, sub_eq_zero] using hf‚ü©)‚ü©

end IsPresentable

end IsGrothendieckAbelian

end CategoryTheory
