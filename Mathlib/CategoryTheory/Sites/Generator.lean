/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.CategoryTheory.Limits.Shapes.Products
import Mathlib.CategoryTheory.Sites.Sheafification
import Mathlib.CategoryTheory.Sites.Limits
import Mathlib.CategoryTheory.Generator

/-!
# Generators in the category of sheaves

In this file, we show that if `J : GrothendieckTopology C` and `A` is a preadditive
category which has a separator (and suitable coproducts), then `Sheaf J A` has a separator.

-/

universe w v' v u' u

namespace CategoryTheory

open Limits Opposite

-- to be moved
open Classical in
lemma IsSeparating.isSeparator_coproduct {C : Type u} [Category.{v} C]
    {Œπ : Type w} {S : Œπ ‚Üí C} (hS : IsSeparating (Set.range S)) [HasCoproduct S]
    [HasZeroMorphisms C] :
    IsSeparator (‚àê S) := by
  intro X Y f g h
  refine hS _ _ ?_
  rintro _ ‚ü®i, rfl‚ü© Œ±
  let Œ≤ : ‚àê S ‚ü∂ X := Sigma.desc
    (fun j ‚Ü¶ if hij : i = j then eqToHom (by rw [hij]) ‚â´ Œ± else 0)
  have hŒ≤ : Sigma.Œπ S i ‚â´ Œ≤ = Œ± := by simp [Œ≤]
  simp only [‚Üê hŒ≤, Category.assoc, h (‚àê S) (by simp) Œ≤]

namespace Presheaf

variable {C : Type u} [Category.{v} C] {A : Type u'} [Category.{v'} A]
  [‚àÄ (Œπ : Type v), HasCoproductsOfShape Œπ A]

/-- Given `X : C` and `M : A`, this is the presheaf `C·µí·µñ ‚•§ A` which sends
`Y : C·µí·µñ` to the coproduct of copies of `M` indexed by `Y.unop ‚ü∂ X`. -/
@[simps]
noncomputable def freeYoneda (X : C) (M : A) : C·µí·µñ ‚•§ A where
  obj Y := ‚àê (fun (i : (yoneda.obj X).obj Y) ‚Ü¶ M)
  map f := Sigma.map' ((yoneda.obj X).map f) (fun _ ‚Ü¶ ùüô M)

/-- The bijection `(Presheaf.freeYoneda X M ‚ü∂ F) ‚âÉ (M ‚ü∂ F.obj (op X))`. -/
noncomputable def freeYonedaHomEquiv {X : C} {M : A} {F : C·µí·µñ ‚•§ A} :
    (freeYoneda X M ‚ü∂ F) ‚âÉ (M ‚ü∂ F.obj (op X)) where
  toFun f := Sigma.Œπ (fun (i : (yoneda.obj X).obj _) ‚Ü¶ M) (ùüô _) ‚â´ f.app (op X)
  invFun g :=
    { app Y := Sigma.desc (fun œÜ ‚Ü¶ g ‚â´ F.map œÜ.op)
      naturality _ _ _ := Sigma.hom_ext _ _ (by simp)}
  left_inv f := by
    ext Y
    refine Sigma.hom_ext _ _ (fun œÜ ‚Ü¶ ?_)
    simpa using (Sigma.Œπ _ (ùüô _) ‚â´= f.naturality œÜ.op).symm
  right_inv g := by simp

@[reassoc]
lemma freeYonedaHomEquiv_comp {X : C} {M : A} {F G : C·µí·µñ ‚•§ A}
    (Œ± : freeYoneda X M ‚ü∂ F) (f : F ‚ü∂ G) :
    freeYonedaHomEquiv (Œ± ‚â´ f) = freeYonedaHomEquiv Œ± ‚â´ f.app (op X) := by
  simp [freeYonedaHomEquiv]

@[reassoc]
lemma freeYonedaHomEquiv_symm_comp {X : C} {M : A} {F G : C·µí·µñ ‚•§ A} (Œ± : M ‚ü∂ F.obj (op X))
    (f : F ‚ü∂ G) :
    freeYonedaHomEquiv.symm Œ± ‚â´ f = freeYonedaHomEquiv.symm (Œ± ‚â´ f.app (op X)) := by
  obtain ‚ü®Œ≤, rfl‚ü© := freeYonedaHomEquiv.surjective Œ±
  apply freeYonedaHomEquiv.injective
  simp only [Equiv.symm_apply_apply, freeYonedaHomEquiv_comp, Equiv.apply_symm_apply]

variable (C)

lemma isSeparating {Œπ : Type w} {S : Œπ ‚Üí A} (hS : IsSeparating (Set.range S)) :
    IsSeparating (Set.range (fun (‚ü®X, i‚ü© : C √ó Œπ) ‚Ü¶ freeYoneda X (S i))) := by
  intro F G f g h
  ext ‚ü®X‚ü©
  refine hS _ _ ?_
  rintro _ ‚ü®i, rfl‚ü© Œ±
  apply freeYonedaHomEquiv.symm.injective
  simpa only [freeYonedaHomEquiv_symm_comp] using
    h _ ‚ü®‚ü®X, i‚ü©, rfl‚ü© (freeYonedaHomEquiv.symm Œ±)

lemma isSeparator {Œπ : Type w} {S : Œπ ‚Üí A} (hS : IsSeparating (Set.range S))
    [HasCoproduct (fun (‚ü®X, i‚ü© : C √ó Œπ) ‚Ü¶ freeYoneda X (S i))]
    [HasZeroMorphisms A] :
    IsSeparator (‚àê (fun (‚ü®X, i‚ü© : C √ó Œπ) ‚Ü¶ freeYoneda X (S i))) :=
  (isSeparating C hS).isSeparator_coproduct

variable (A) in
instance hasSeparator [HasSeparator A] [HasZeroMorphisms A]
    [‚àÄ (Œπ : Type u), HasCoproductsOfShape Œπ A] :
    HasSeparator (C·µí·µñ ‚•§ A) where
  hasSeparator := ‚ü®_, isSeparator C (S := fun (_ : Unit) ‚Ü¶ separator A)
      (by simpa using isSeparator_separator A)‚ü©

end Presheaf

namespace Sheaf

variable {C : Type u} [Category.{v} C]
  (J : GrothendieckTopology C) {A : Type u'} [Category.{v'} A]
  [‚àÄ (Œπ : Type v), HasCoproductsOfShape Œπ A]
  [HasWeakSheafify J A]

/-- Given `J : GrothendieckTopology C`, `X : C` and `M : A`, this is the associated
sheaf to the presheaf `Presheaf.freeYoneda X M`. -/
noncomputable def freeYoneda (X : C) (M : A) : Sheaf J A :=
  (presheafToSheaf J A).obj (Presheaf.freeYoneda X M)

variable {J} in
/-- The bijection `(Sheaf.freeYoneda J X M ‚ü∂ F) ‚âÉ (M ‚ü∂ F.val.obj (op X))`
when `F : Sheaf J A`, `X : C` and `M : A`. -/
noncomputable def freeYonedaHomEquiv {X : C} {M : A} {F : Sheaf J A} :
    (freeYoneda J X M ‚ü∂ F) ‚âÉ (M ‚ü∂ F.val.obj (op X)) :=
  ((sheafificationAdjunction J A).homEquiv _ _).trans Presheaf.freeYonedaHomEquiv

lemma isSeparating {Œπ : Type w} {S : Œπ ‚Üí A} (hS : IsSeparating (Set.range S)) :
    IsSeparating (Set.range (fun (‚ü®X, i‚ü© : C √ó Œπ) ‚Ü¶ freeYoneda J X (S i))) := by
  intro F G f g hfg
  refine (sheafToPresheaf J A).map_injective ((Presheaf.isSeparating C hS) _ _ ?_)
  rintro _ ‚ü®‚ü®X, i‚ü©, rfl‚ü© a
  dsimp at a
  apply ((sheafificationAdjunction _ _).homEquiv _ _).symm.injective
  simpa only [‚Üê Adjunction.homEquiv_naturality_right_symm] using
    hfg _ ‚ü®‚ü®X, i‚ü©, rfl‚ü© (((sheafificationAdjunction _ _).homEquiv _ _).symm a)

lemma isSeparator {Œπ : Type w} {S : Œπ ‚Üí A} (hS : IsSeparating (Set.range S))
    [HasCoproduct (fun (‚ü®X, i‚ü© : C √ó Œπ) ‚Ü¶ freeYoneda J X (S i))] [Preadditive A] :
    IsSeparator (‚àê (fun (‚ü®X, i‚ü© : C √ó Œπ) ‚Ü¶ freeYoneda J X (S i))) :=
  (isSeparating J hS).isSeparator_coproduct

variable (A) in
instance hasSeparator [HasSeparator A] [Preadditive A]
    [‚àÄ (Œπ : Type u), HasCoproductsOfShape Œπ A] :
    HasSeparator (Sheaf J A) where
  hasSeparator := ‚ü®_, isSeparator J (S := fun (_ : Unit) ‚Ü¶ separator A)
      (by simpa using isSeparator_separator A)‚ü©

end Sheaf

end CategoryTheory
