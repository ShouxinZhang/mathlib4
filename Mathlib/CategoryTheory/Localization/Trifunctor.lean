/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Localization.Bifunctor
import Mathlib.CategoryTheory.Functor.Trifunctor
import Mathlib.CategoryTheory.Products.Associator

/-!
# Lifting of trifunctors

-/

namespace CategoryTheory

section

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ C‚ÇÑ C‚ÇÅ‚ÇÇ C‚ÇÇ‚ÇÉ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ]
  [Category C‚ÇÑ] [Category C‚ÇÅ‚ÇÇ] [Category C‚ÇÇ‚ÇÉ]

abbrev whiskeringRight‚ÇÉ {D : Type*} [Category D] :
    (C‚ÇÑ ‚•§ D) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ D) :=
  (whiskeringRight C‚ÇÉ _ _) ‚ãô (whiskeringRight C‚ÇÇ _ _) ‚ãô (whiskeringRight C‚ÇÅ _ _)

@[simps]
def bifunctorComp‚ÇÅ‚ÇÇFunctorObj (F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ) :
    (C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) where
  obj G := bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G
  map {G G'} œÜ :=
    { app := fun X‚ÇÅ ‚Ü¶
        { app := fun X‚ÇÇ ‚Ü¶
            { app := fun X‚ÇÉ ‚Ü¶ (œÜ.app ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).obj X‚ÇÇ)).app X‚ÇÉ }
          naturality := fun X‚ÇÇ Y‚ÇÇ f ‚Ü¶ by
            ext X‚ÇÉ
            dsimp
            simp only [‚Üê NatTrans.comp_app, NatTrans.naturality] }
      naturality := fun X‚ÇÅ Y‚ÇÅ f ‚Ü¶ by
        ext X‚ÇÇ X‚ÇÉ
        dsimp
        simp only [‚Üê NatTrans.comp_app, NatTrans.naturality] }

@[simps]
def bifunctorComp‚ÇÅ‚ÇÇFunctorMap {F‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ' : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ} (œÜ : F‚ÇÅ‚ÇÇ ‚ü∂ F‚ÇÅ‚ÇÇ') :
    bifunctorComp‚ÇÅ‚ÇÇFunctorObj (C‚ÇÉ := C‚ÇÉ) (C‚ÇÑ := C‚ÇÑ) F‚ÇÅ‚ÇÇ ‚ü∂ bifunctorComp‚ÇÅ‚ÇÇFunctorObj F‚ÇÅ‚ÇÇ' where
  app := fun G ‚Ü¶
    { app := fun X‚ÇÅ ‚Ü¶
        { app := fun X‚ÇÇ ‚Ü¶
            { app := fun X‚ÇÉ ‚Ü¶ (G.map ((œÜ.app X‚ÇÅ).app X‚ÇÇ)).app X‚ÇÉ }
          naturality := fun X‚ÇÇ Y‚ÇÇ f ‚Ü¶ by
            ext X‚ÇÉ
            dsimp
            simp only [‚Üê NatTrans.comp_app, NatTrans.naturality, ‚Üê G.map_comp] }
      naturality := fun X‚ÇÅ Y‚ÇÅ f ‚Ü¶ by
        ext X‚ÇÇ X‚ÇÉ
        dsimp
        simp only [‚Üê NatTrans.comp_app, NatTrans.naturality, ‚Üê G.map_comp] }
  naturality := fun G G' f ‚Ü¶ by
    ext X‚ÇÅ X‚ÇÇ X‚ÇÉ
    dsimp
    simp only [‚Üê NatTrans.comp_app, NatTrans.naturality]

@[simps]
def bifunctorComp‚ÇÅ‚ÇÇFunctor : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ) ‚•§ (C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) where
  obj := bifunctorComp‚ÇÅ‚ÇÇFunctorObj
  map := bifunctorComp‚ÇÅ‚ÇÇFunctorMap

@[simps]
def bifunctorComp‚ÇÇ‚ÇÉFunctorObj (F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ) :
    (C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) where
  obj G‚ÇÇ‚ÇÉ := bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ
  map {G‚ÇÇ‚ÇÉ G‚ÇÇ‚ÇÉ'} œÜ :=
    { app := fun X‚ÇÅ ‚Ü¶
        { app := fun X‚ÇÇ ‚Ü¶
            { app := fun X‚ÇÉ ‚Ü¶ (F.obj X‚ÇÅ).map ((œÜ.app X‚ÇÇ).app X‚ÇÉ)
              naturality := fun X‚ÇÉ Y‚ÇÉ f ‚Ü¶ by
                dsimp
                simp only [‚Üê Functor.map_comp, NatTrans.naturality] }
          naturality := fun X‚ÇÇ Y‚ÇÇ f ‚Ü¶ by
            ext X‚ÇÉ
            dsimp
            simp only [‚Üê NatTrans.comp_app, ‚Üê Functor.map_comp, NatTrans.naturality] } }

@[simps]
def bifunctorComp‚ÇÇ‚ÇÉFunctorMap {F F' : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ} (œÜ : F ‚ü∂ F') :
    bifunctorComp‚ÇÇ‚ÇÉFunctorObj F (C‚ÇÇ := C‚ÇÇ) (C‚ÇÉ := C‚ÇÉ) ‚ü∂ bifunctorComp‚ÇÇ‚ÇÉFunctorObj F' where
  app G‚ÇÇ‚ÇÉ :=
    { app := fun X‚ÇÅ ‚Ü¶
        { app := fun X‚ÇÇ ‚Ü¶
            { app := fun X‚ÇÉ ‚Ü¶ (œÜ.app X‚ÇÅ).app ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).obj X‚ÇÉ)
              naturality := by aesop_cat }
          naturality := by aesop_cat }
      naturality := fun X‚ÇÅ Y‚ÇÅ f ‚Ü¶ by
        ext X‚ÇÇ X‚ÇÉ
        dsimp
        simp only [‚Üê NatTrans.comp_app, NatTrans.naturality] }

@[simps]
def bifunctorComp‚ÇÇ‚ÇÉFunctor :
    (C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ) ‚•§ (C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) where
  obj := bifunctorComp‚ÇÇ‚ÇÉFunctorObj
  map := bifunctorComp‚ÇÇ‚ÇÉFunctorMap

variable (F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ) (G : C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ)

def bifunctorComp‚ÇÅ‚ÇÇIso : bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G ‚âÖ curry.obj (uncurry.obj F‚ÇÅ‚ÇÇ ‚ãô G) :=
  NatIso.ofComponents (fun _ => NatIso.ofComponents (fun _ => Iso.refl _))

variable (F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ) (G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ)

def bifunctorComp‚ÇÇ‚ÇÉIso : bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ ‚âÖ
    curry.obj (curry.obj (prod.associator _ _ _ ‚ãô uncurry.obj (uncurry.obj G‚ÇÇ‚ÇÉ ‚ãô F.flip).flip)) :=
  NatIso.ofComponents (fun _ ‚Ü¶ NatIso.ofComponents (fun _ ‚Ü¶
    NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)))

end

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ E : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ] [Category E]

@[reassoc (attr := simp)]
lemma Iso.hom_inv_id_app_app_app {F G : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E} (e : F ‚âÖ G)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    ((e.hom.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ ‚â´ ((e.inv.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ = ùüô _ := by
  rw [‚Üê NatTrans.comp_app, ‚Üê NatTrans.comp_app, Iso.hom_inv_id_app,
    NatTrans.id_app, NatTrans.id_app]

@[reassoc (attr := simp)]
lemma Iso.inv_hom_id_app_app_app {F G : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E} (e : F ‚âÖ G)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    ((e.inv.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ ‚â´ ((e.hom.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ = ùüô _ := by
  rw [‚Üê NatTrans.comp_app, ‚Üê NatTrans.comp_app, Iso.inv_hom_id_app,
    NatTrans.id_app, NatTrans.id_app]

def currying‚ÇÉ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) ‚âå (C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E) :=
  currying.trans (currying.trans (prod.associativity C‚ÇÅ C‚ÇÇ C‚ÇÉ).congrLeft)

abbrev uncurry‚ÇÉ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) ‚•§ (C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E) := currying‚ÇÉ.functor
abbrev curry‚ÇÉ : (C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) := currying‚ÇÉ.inverse

def fullyFaithfulUncurry‚ÇÉ :
    (uncurry‚ÇÉ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) ‚•§ (C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E)).FullyFaithful :=
  currying‚ÇÉ.fullyFaithfulFunctor

@[simp]
lemma curry‚ÇÉ_obj_map_app_app (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E)
    {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((currying‚ÇÉ.inverse.obj F).map f).app X‚ÇÇ).app X‚ÇÉ = F.map ‚ü®f, ùüô X‚ÇÇ, ùüô X‚ÇÉ‚ü© := rfl

@[simp]
lemma curry‚ÇÉ_obj_obj_map_app (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((currying‚ÇÉ.inverse.obj F).obj X‚ÇÅ).map f).app X‚ÇÉ = F.map ‚ü®ùüô X‚ÇÅ, f, ùüô X‚ÇÉ‚ü© := rfl

@[simp]
lemma curry‚ÇÉ_obj_obj_obj_map (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) {X‚ÇÉ Y‚ÇÉ : C‚ÇÉ} (f : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    (((currying‚ÇÉ.inverse.obj F).obj X‚ÇÅ).obj X‚ÇÇ).map f = F.map ‚ü®ùüô X‚ÇÅ, ùüô X‚ÇÇ, f‚ü© := rfl

@[simp]
lemma curry‚ÇÉ_map_app_app_app {F G : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ E} (f : F ‚ü∂ G)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((currying‚ÇÉ.inverse.map f).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ = f.app ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ‚ü© := rfl

@[simp]
lemma currying‚ÇÉ_unitIso_hom_app_app_app_app (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((currying‚ÇÉ.unitIso.hom.app F).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ = ùüô _ := by
  simp [currying‚ÇÉ, Equivalence.unit]

@[simp]
lemma currying‚ÇÉ_unitIso_inv_app_app_app_app (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E)
    (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((currying‚ÇÉ.unitIso.inv.app F).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ = ùüô _ := by
  simp [currying‚ÇÉ, Equivalence.unitInv]

namespace MorphismProperty

def IsInvertedBy‚ÇÉ (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ)
    (W‚ÇÉ : MorphismProperty C‚ÇÉ)
    (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) : Prop :=
  (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ)).IsInvertedBy (currying‚ÇÉ.functor.obj F)

end MorphismProperty

variable {D‚ÇÅ D‚ÇÇ D‚ÇÉ : Type*} [Category D‚ÇÅ] [Category D‚ÇÇ] [Category D‚ÇÉ]

@[simps!]
def whiskeringLeft‚ÇÉObjObjObj (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (F‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ)
    (E : Type*) [Category E] :
    (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) :=
  (whiskeringRight _ _ _).obj (((whiskeringLeft‚ÇÇ E).obj F‚ÇÇ).obj F‚ÇÉ) ‚ãô
    (whiskeringLeft C‚ÇÅ D‚ÇÅ _).obj F‚ÇÅ

@[simps!]
def curry‚ÇÉObjProdComp (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (F‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ) (G : D‚ÇÅ √ó D‚ÇÇ √ó D‚ÇÉ ‚•§ E) :
    curry‚ÇÉ.obj (F‚ÇÅ.prod (F‚ÇÇ.prod F‚ÇÉ) ‚ãô G) ‚âÖ
      F‚ÇÅ ‚ãô curry‚ÇÉ.obj G ‚ãô ((whiskeringLeft‚ÇÇ E).obj F‚ÇÇ).obj F‚ÇÉ :=
  NatIso.ofComponents
    (fun X‚ÇÅ ‚Ü¶ NatIso.ofComponents
      (fun X‚ÇÇ ‚Ü¶ NatIso.ofComponents (fun X‚ÇÉ ‚Ü¶ Iso.refl _)))

namespace Localization

section

variable (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ)

class Lifting‚ÇÉ (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ)
    (W‚ÇÉ : MorphismProperty C‚ÇÉ)
    (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) (F' : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E) where
  iso': (whiskeringLeft‚ÇÉObjObjObj L‚ÇÅ L‚ÇÇ L‚ÇÉ E).obj F' ‚âÖ F

variable (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ) (W‚ÇÉ : MorphismProperty C‚ÇÉ)
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) (F' : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E) [Lifting‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F F']

noncomputable def Lifting‚ÇÉ.iso : (whiskeringLeft‚ÇÉObjObjObj L‚ÇÅ L‚ÇÇ L‚ÇÉ E).obj F' ‚âÖ F :=
  Lifting‚ÇÉ.iso' W‚ÇÅ W‚ÇÇ W‚ÇÉ

variable (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) (F' : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E)

noncomputable instance Lifting‚ÇÉ.uncurry [Lifting‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F F'] :
    Lifting (L‚ÇÅ.prod (L‚ÇÇ.prod L‚ÇÉ)) (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ))
      (uncurry‚ÇÉ.obj F) (uncurry‚ÇÉ.obj F') where
  iso' := uncurry‚ÇÉ.mapIso (Lifting‚ÇÉ.iso L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F F')

end

section

variable (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ}
  {W‚ÇÉ : MorphismProperty C‚ÇÉ}
  (hF : MorphismProperty.IsInvertedBy‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F)
  (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ)
  [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ] [L‚ÇÉ.IsLocalization W‚ÇÉ]
  [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities] [W‚ÇÉ.ContainsIdentities]

noncomputable def lift‚ÇÉ : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E :=
  curry‚ÇÉ.obj (lift (uncurry‚ÇÉ.obj F) hF (L‚ÇÅ.prod (L‚ÇÇ.prod L‚ÇÉ)))

noncomputable instance : Lifting‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F (lift‚ÇÉ F hF L‚ÇÅ L‚ÇÇ L‚ÇÉ) where
  iso' :=
    (curry‚ÇÉObjProdComp L‚ÇÅ L‚ÇÇ L‚ÇÉ _).symm ‚â™‚â´
      curry‚ÇÉ.mapIso (fac (uncurry‚ÇÉ.obj F) hF (L‚ÇÅ.prod (L‚ÇÇ.prod L‚ÇÉ))) ‚â™‚â´
        currying‚ÇÉ.unitIso.symm.app F

end

section

variable (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ)
  (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ) (W‚ÇÉ : MorphismProperty C‚ÇÉ)
  [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ] [L‚ÇÉ.IsLocalization W‚ÇÉ]
  [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities] [W‚ÇÉ.ContainsIdentities]
  (F‚ÇÅ F‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ E)
  [Lifting‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F‚ÇÅ F‚ÇÅ'] [Lifting‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F‚ÇÇ F‚ÇÇ'] (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ)
  (e : F‚ÇÅ ‚âÖ F‚ÇÇ)

noncomputable def lift‚ÇÉNatTrans : F‚ÇÅ' ‚ü∂ F‚ÇÇ' :=
  fullyFaithfulUncurry‚ÇÉ.preimage
    (liftNatTrans (L‚ÇÅ.prod (L‚ÇÇ.prod L‚ÇÉ)) (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ)) (uncurry‚ÇÉ.obj F‚ÇÅ)
      (uncurry‚ÇÉ.obj F‚ÇÇ) (uncurry‚ÇÉ.obj F‚ÇÅ') (uncurry‚ÇÉ.obj F‚ÇÇ') (uncurry‚ÇÉ.map œÑ))

@[simp]
theorem lift‚ÇÉNatTrans_app_app_app (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((lift‚ÇÉNatTrans L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' œÑ).app
        (L‚ÇÅ.obj X‚ÇÅ)).app (L‚ÇÇ.obj X‚ÇÇ)).app (L‚ÇÉ.obj X‚ÇÉ) =
      (((Lifting‚ÇÉ.iso L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F‚ÇÅ F‚ÇÅ').hom.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ ‚â´
        ((œÑ.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ ‚â´
        (((Lifting‚ÇÉ.iso L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F‚ÇÇ F‚ÇÇ').inv.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ := by
  dsimp [lift‚ÇÉNatTrans, fullyFaithfulUncurry‚ÇÉ, Equivalence.fullyFaithfulFunctor]
  simp only [currying‚ÇÉ_unitIso_hom_app_app_app_app, Functor.id_obj,
    currying‚ÇÉ_unitIso_inv_app_app_app_app, Functor.comp_obj,
    Category.comp_id, Category.id_comp]
  exact liftNatTrans_app _ _ _ _ (uncurry‚ÇÉ.obj F‚ÇÅ') (uncurry‚ÇÉ.obj F‚ÇÇ') (uncurry‚ÇÉ.map œÑ) ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ‚ü©

variable {F‚ÇÅ' F‚ÇÇ'} in
include W‚ÇÅ W‚ÇÇ W‚ÇÉ in
theorem natTrans‚ÇÉ_ext {œÑ œÑ' : F‚ÇÅ' ‚ü∂ F‚ÇÇ'}
    (h : ‚àÄ (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ), ((œÑ.app (L‚ÇÅ.obj X‚ÇÅ)).app (L‚ÇÇ.obj X‚ÇÇ)).app (L‚ÇÉ.obj X‚ÇÉ) =
      ((œÑ'.app (L‚ÇÅ.obj X‚ÇÅ)).app (L‚ÇÇ.obj X‚ÇÇ)).app (L‚ÇÉ.obj X‚ÇÉ)) : œÑ = œÑ' :=
  uncurry‚ÇÉ.map_injective (natTrans_ext (L‚ÇÅ.prod (L‚ÇÇ.prod L‚ÇÉ)) (W‚ÇÅ.prod (W‚ÇÇ.prod W‚ÇÉ))
    (fun _ ‚Ü¶ h _ _ _))

@[simps]
noncomputable def lift‚ÇÉNatIso : F‚ÇÅ' ‚âÖ F‚ÇÇ' where
  hom := lift‚ÇÉNatTrans L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' e.hom
  inv := lift‚ÇÉNatTrans L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ F‚ÇÇ F‚ÇÅ F‚ÇÇ' F‚ÇÅ' e.inv
  hom_inv_id := natTrans‚ÇÉ_ext L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ (by aesop_cat)
  inv_hom_id := natTrans‚ÇÉ_ext L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ (by aesop_cat)

end

section

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ C‚ÇÅ‚ÇÇ C‚ÇÇ‚ÇÉ C : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ]
  [Category C‚ÇÅ‚ÇÇ] [Category C‚ÇÇ‚ÇÉ] [Category C]
  {D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÅ‚ÇÇ D‚ÇÇ‚ÇÉ D : Type*} [Category D‚ÇÅ] [Category D‚ÇÇ] [Category D‚ÇÉ]
  [Category D‚ÇÅ‚ÇÇ] [Category D‚ÇÇ‚ÇÉ] [Category D]
  (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ) (L‚ÇÅ‚ÇÇ : C‚ÇÅ‚ÇÇ ‚•§ D‚ÇÅ‚ÇÇ) (L‚ÇÇ‚ÇÉ : C‚ÇÇ‚ÇÉ ‚•§ D‚ÇÇ‚ÇÉ) (L : C ‚•§ D)
  (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ) (W‚ÇÉ : MorphismProperty C‚ÇÉ)
  (W‚ÇÅ‚ÇÇ : MorphismProperty C‚ÇÅ‚ÇÇ) (W‚ÇÇ‚ÇÉ : MorphismProperty C‚ÇÇ‚ÇÉ) (W : MorphismProperty C)
  [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities] [W‚ÇÉ.ContainsIdentities]
  [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ] [L‚ÇÉ.IsLocalization W‚ÇÉ] [L.IsLocalization W]
  (F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ) (G : C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C)
  (F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C) (G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ)
  (iso : bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G ‚âÖ bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ)
  (F‚ÇÅ‚ÇÇ' : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ D‚ÇÅ‚ÇÇ) (G' : D‚ÇÅ‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D)
  (F' : D‚ÇÅ ‚•§ D‚ÇÇ‚ÇÉ ‚•§ D) (G‚ÇÇ‚ÇÉ' : D‚ÇÇ ‚•§ D‚ÇÉ ‚•§ D‚ÇÇ‚ÇÉ)
  [Lifting‚ÇÇ L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ (F‚ÇÅ‚ÇÇ ‚ãô (whiskeringRight _ _ _).obj L‚ÇÅ‚ÇÇ) F‚ÇÅ‚ÇÇ']
  [Lifting‚ÇÇ L‚ÇÅ‚ÇÇ L‚ÇÉ W‚ÇÅ‚ÇÇ W‚ÇÉ (G ‚ãô (whiskeringRight _ _ _).obj L) G']
  [Lifting‚ÇÇ L‚ÇÅ L‚ÇÇ‚ÇÉ W‚ÇÅ W‚ÇÇ‚ÇÉ (F ‚ãô (whiskeringRight _ _ _).obj L) F']
  [Lifting‚ÇÇ L‚ÇÇ L‚ÇÉ W‚ÇÇ W‚ÇÉ (G‚ÇÇ‚ÇÉ ‚ãô (whiskeringRight _ _ _).obj L‚ÇÇ‚ÇÉ) G‚ÇÇ‚ÇÉ']

 noncomputable def Lifting‚ÇÉ.bifunctorComp‚ÇÅ‚ÇÇ :
    Lifting‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ
      ((whiskeringRight‚ÇÉ.obj L).obj (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G))
      (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ' G') where
  iso' :=
    ((whiskeringRight C‚ÇÅ _ _).obj
      ((whiskeringRight C‚ÇÇ _ _).obj ((whiskeringLeft _ _ D).obj L‚ÇÉ))).mapIso
        ((bifunctorComp‚ÇÅ‚ÇÇFunctor.mapIso
          (Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ (F‚ÇÅ‚ÇÇ ‚ãô (whiskeringRight _ _ _).obj L‚ÇÅ‚ÇÇ) F‚ÇÅ‚ÇÇ')).app G') ‚â™‚â´
        (bifunctorComp‚ÇÅ‚ÇÇFunctor.obj F‚ÇÅ‚ÇÇ).mapIso
          (Lifting‚ÇÇ.iso L‚ÇÅ‚ÇÇ L‚ÇÉ W‚ÇÅ‚ÇÇ W‚ÇÉ (G ‚ãô (whiskeringRight _ _ _).obj L) G')

noncomputable def Lifting‚ÇÉ.bifunctorComp‚ÇÇ‚ÇÉ :
    Lifting‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ
      ((whiskeringRight‚ÇÉ.obj L).obj (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ))
      (bifunctorComp‚ÇÇ‚ÇÉ F' G‚ÇÇ‚ÇÉ') where
  iso' :=
    ((whiskeringLeft _ _ _).obj L‚ÇÅ).mapIso ((bifunctorComp‚ÇÇ‚ÇÉFunctor.obj F').mapIso
      (Lifting‚ÇÇ.iso L‚ÇÇ L‚ÇÉ W‚ÇÇ W‚ÇÉ (G‚ÇÇ‚ÇÉ ‚ãô (whiskeringRight _ _ _).obj L‚ÇÇ‚ÇÉ) G‚ÇÇ‚ÇÉ')) ‚â™‚â´
        (bifunctorComp‚ÇÇ‚ÇÉFunctor.mapIso
          (Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ‚ÇÉ W‚ÇÅ W‚ÇÇ‚ÇÉ (F ‚ãô (whiskeringRight _ _ _).obj L) F')).app G‚ÇÇ‚ÇÉ

variable {F‚ÇÅ‚ÇÇ G F G‚ÇÇ‚ÇÉ}

noncomputable def associator : bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ' G' ‚âÖ bifunctorComp‚ÇÇ‚ÇÉ F' G‚ÇÇ‚ÇÉ' :=
  letI := Lifting‚ÇÉ.bifunctorComp‚ÇÅ‚ÇÇ L‚ÇÅ L‚ÇÇ L‚ÇÉ L‚ÇÅ‚ÇÇ L W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G F‚ÇÅ‚ÇÇ' G'
  letI := Lifting‚ÇÉ.bifunctorComp‚ÇÇ‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ L‚ÇÇ‚ÇÉ L W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ F' G‚ÇÇ‚ÇÉ'
  lift‚ÇÉNatIso L‚ÇÅ L‚ÇÇ L‚ÇÉ W‚ÇÅ W‚ÇÇ W‚ÇÉ _ _ _ _ ((whiskeringRight‚ÇÉ.obj L).mapIso iso)

lemma associator_hom_app_app_app (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) (X‚ÇÉ : C‚ÇÉ) :
    (((associator L‚ÇÅ L‚ÇÇ L‚ÇÉ L‚ÇÅ‚ÇÇ L‚ÇÇ‚ÇÉ L W‚ÇÅ W‚ÇÇ W‚ÇÉ W‚ÇÅ‚ÇÇ W‚ÇÇ‚ÇÉ iso F‚ÇÅ‚ÇÇ' G' F' G‚ÇÇ‚ÇÉ').hom.app (L‚ÇÅ.obj X‚ÇÅ)).app
      (L‚ÇÇ.obj X‚ÇÇ)).app (L‚ÇÉ.obj X‚ÇÉ) =
        (G'.map (((Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ
          (F‚ÇÅ‚ÇÇ ‚ãô (whiskeringRight C‚ÇÇ C‚ÇÅ‚ÇÇ D‚ÇÅ‚ÇÇ).obj L‚ÇÅ‚ÇÇ) F‚ÇÅ‚ÇÇ').hom.app X‚ÇÅ).app X‚ÇÇ)).app (L‚ÇÉ.obj X‚ÇÉ) ‚â´
          ((Lifting‚ÇÇ.iso L‚ÇÅ‚ÇÇ L‚ÇÉ W‚ÇÅ‚ÇÇ W‚ÇÉ (G ‚ãô (whiskeringRight C‚ÇÉ C D).obj L) G').hom.app
              ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).obj X‚ÇÇ)).app X‚ÇÉ ‚â´
            L.map (((iso.hom.app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ) ‚â´
          ((Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ‚ÇÉ W‚ÇÅ W‚ÇÇ‚ÇÉ
            (F ‚ãô (whiskeringRight _ _ _).obj L) F').inv.app X‚ÇÅ).app ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).obj X‚ÇÉ) ‚â´
        (F'.obj (L‚ÇÅ.obj X‚ÇÅ)).map
          (((Lifting‚ÇÇ.iso L‚ÇÇ L‚ÇÉ W‚ÇÇ W‚ÇÉ
            (G‚ÇÇ‚ÇÉ ‚ãô (whiskeringRight _ _ _).obj L‚ÇÇ‚ÇÉ) G‚ÇÇ‚ÇÉ').inv.app X‚ÇÇ).app X‚ÇÉ) := by
  dsimp [associator]
  rw [lift‚ÇÉNatTrans_app_app_app]
  dsimp [Lifting‚ÇÉ.iso, Lifting‚ÇÉ.bifunctorComp‚ÇÅ‚ÇÇ, Lifting‚ÇÉ.bifunctorComp‚ÇÇ‚ÇÉ]
  simp only [Category.assoc]

end

end Localization

end CategoryTheory
