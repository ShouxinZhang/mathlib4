/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.SmallObject.Iteration.Nonempty
import Mathlib.CategoryTheory.MorphismProperty.TransfiniteComposition

/-!
# Transfinite iteration of a functor

Let `Œ¶ : C ‚•§ C` be a functor and `Œµ : ùü≠ C ‚ü∂ Œ¶` be a natural transformation.
For any well-ordered type `J` such that suitable colimits exists
(condition `HasIterationOfShape C J`), we define `Œ¶.transfiniteIteration Œµ J : C ‚•§ C`.
It is defined as the colimit of the functor `Œ¶.transfiniteIterationCocone Œµ J : J ‚•§ C ‚•§ C`
which sends `j : J` to `Œ¶.transfiniteIterationObj Œµ j` which is the
value at `j` of the functor `(Œ¶.iteration Œµ j).F` where
`Œ¶.iteration Œµ j` is the unique object (up to a unique isomorphism) of
the category `Iteration Œµ j` (see the files `SmallObject.Iteration.Basic`,
`SmallObject.Iteration.UniqueHom` and `SmallObject.Iteration.Nonempty`).

If `Œµ` consists of morphisms which belong to a class `W : MorphismProperty C`,
we show in the lemma `transfiniteCompositionsOfShape_ŒπTransfiniteIteration_app`
that the map `(Œ¶.ŒπTransfiniteIteration Œµ J).app X : X ‚ü∂ (Œ¶.transfiniteIteration Œµ J).obj X`
is in the class `W.transfiniteCompositionsOfShape J`, i.e. the class of
transfinite compositions of `W` of shape `J`.

-/

universe u

namespace CategoryTheory

open Category Limits

namespace Functor

variable {C : Type*} [Category C] (Œ¶ : C ‚•§ C) (Œµ : ùü≠ C ‚ü∂ Œ¶)
  {J : Type u} [LinearOrder J] [OrderBot J] [SuccOrder J] [WellFoundedLT J]
  [HasIterationOfShape C J]

/-- Given a natural transformation `Œµ : ùü≠ C ‚ü∂ Œ¶` and `j : J`,
this is a choice of object in the category `Iteration Œµ j`. -/
noncomputable def iteration (j : J) : Iteration Œµ j := Classical.arbitrary _

/-- Given a natural transformation `Œµ : ùü≠ C ‚ü∂ Œ¶` and `j : J`,
this is the functor `C ‚•§ C` obtained by evaluating at `j`
the functor `(Œ¶.iteration Œµ j).F`. -/
noncomputable def transfiniteIterationObj (j : J) : C ‚•§ C :=
  (Œ¶.iteration Œµ j).F.obj ‚ü®j, by simp‚ü©

/-- The inclusion `ùü≠ C ‚ü∂ Œ¶.transfiniteIterationObj Œµ j`. -/
noncomputable def ŒπTransfiniteIterationObj (j : J) :
    ùü≠ C ‚ü∂ Œ¶.transfiniteIterationObj Œµ j :=
  (Œ¶.iteration Œµ j).isoZero.inv ‚â´ (Œ¶.iteration Œµ j).F.map (homOfLE bot_le)

/-- The map `Œ¶.transfiniteIterationObj Œµ j‚ÇÅ ‚ü∂ Œ¶.transfiniteIterationObj Œµ j‚ÇÇ`
induced by an inequality `j‚ÇÅ ‚â§ j‚ÇÇ`. -/
noncomputable def transfiniteIterationMap {j‚ÇÅ j‚ÇÇ : J} (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    Œ¶.transfiniteIterationObj Œµ j‚ÇÅ ‚ü∂ Œ¶.transfiniteIterationObj Œµ j‚ÇÇ :=
  (Iteration.iso (Œ¶.iteration Œµ j‚ÇÅ)
    ((Œ¶.iteration Œµ j‚ÇÇ).trunc h)).hom.natTrans.app ‚ü®j‚ÇÅ, by simp‚ü© ‚â´
      (Œ¶.iteration Œµ j‚ÇÇ).F.map (homOfLE h)

@[reassoc (attr := simp)]
lemma Œπ_transfiniteIterationMap {j‚ÇÅ j‚ÇÇ : J} (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    Œ¶.ŒπTransfiniteIterationObj Œµ j‚ÇÅ ‚â´ Œ¶.transfiniteIterationMap Œµ h =
      Œ¶.ŒπTransfiniteIterationObj Œµ j‚ÇÇ := by
  simp [ŒπTransfiniteIterationObj, transfiniteIterationMap, ‚Üê Functor.map_comp]

@[simp]
lemma transfiniteIterationMap_refl (j : J) :
    Œ¶.transfiniteIterationMap Œµ (le_refl j) = ùüô _ := by
  simp [transfiniteIterationMap, transfiniteIterationObj]

@[reassoc]
lemma transfiniteIterationMap_trans {j‚ÇÅ j‚ÇÇ j‚ÇÉ : J} (h‚ÇÅ‚ÇÇ : j‚ÇÅ ‚â§ j‚ÇÇ) (h‚ÇÇ‚ÇÉ : j‚ÇÇ ‚â§ j‚ÇÉ) :
    Œ¶.transfiniteIterationMap Œµ (h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ÇÉ) =
      Œ¶.transfiniteIterationMap Œµ h‚ÇÅ‚ÇÇ ‚â´ Œ¶.transfiniteIterationMap Œµ h‚ÇÇ‚ÇÉ := by
  dsimp [transfiniteIterationMap, transfiniteIterationObj]
  rw [‚Üê Iteration.iso_hom_comp_iso_hom _ ((Œ¶.iteration Œµ j‚ÇÇ).trunc h‚ÇÅ‚ÇÇ) _]
  simp [‚Üê map_comp, ‚Üê Iteration.iso_trunc_hom_natTrans_app _ _ h‚ÇÅ‚ÇÇ]

/-- The canonical isomorphism
`Œ¶.transfiniteIterationObj Œµ (Order.succ j) ‚âÖ Œ¶.transfiniteIterationObj Œµ j ‚ãô Œ¶`. -/
noncomputable def transfiniteIterationObjSuccIso (j : J) (hj : ¬¨ IsMax j) :
    Œ¶.transfiniteIterationObj Œµ (Order.succ j) ‚âÖ
      Œ¶.transfiniteIterationObj Œµ j ‚ãô Œ¶ :=
  (Œ¶.iteration Œµ (Order.succ j)).isoSucc j (Order.lt_succ_of_not_isMax hj) ‚â™‚â´
    isoWhiskerRight ((Iteration.eval Œµ (le_refl j)).mapIso
      (Iteration.iso ((Œ¶.iteration Œµ (Order.succ j)).trunc (Order.le_succ j))
        (Œ¶.iteration Œµ j))) Œ¶

lemma transfiniteIterationMap_le_succ (j : J) (hj : ¬¨ IsMax j) :
    Œ¶.transfiniteIterationMap Œµ (Order.le_succ j) =
      whiskerLeft _ Œµ ‚â´ (Œ¶.transfiniteIterationObjSuccIso Œµ j hj).inv := by
  ext X
  have := congr_app ((Œ¶.iteration Œµ (Order.succ j)).mapSucc_eq j
    (Order.lt_succ_of_not_isMax hj)) X
  dsimp at this
  dsimp [transfiniteIterationObjSuccIso]
  rw [‚Üê Œµ.naturality_assoc, ‚Üê this]
  rfl

lemma transfiniteIterationMap_le_succ_app (j : J) (hj : ¬¨ IsMax j) (X : C) :
    (Œ¶.transfiniteIterationMap Œµ (Order.le_succ j)).app X =
      Œµ.app _ ‚â´ (Œ¶.transfiniteIterationObjSuccIso Œµ j hj).inv.app X := by
  simp [transfiniteIterationMap_le_succ _ _ _ hj]

variable (J)

/-- The canonical isomorphism `Œ¶.transfiniteIterationObj Œµ (‚ä• : J) ‚âÖ ùü≠ C`. -/
noncomputable def transfiniteIterationObjBotIso :
    Œ¶.transfiniteIterationObj Œµ (‚ä• : J) ‚âÖ ùü≠ C :=
  (Œ¶.iteration Œµ (‚ä• : J)).isoZero

lemma ŒπTransfiniteIterationObj_bot :
    Œ¶.ŒπTransfiniteIterationObj Œµ (‚ä• : J) =
      (Œ¶.transfiniteIterationObjBotIso Œµ J).inv := by
  simp [ŒπTransfiniteIterationObj, transfiniteIterationObjBotIso]

/-- The functor `J ‚•§ C ‚•§ C` which sends `j : J` to `Œ¶.transfiniteIterationObj Œµ j`. -/
@[simps]
noncomputable def transfiniteIterationFunctor : J ‚•§ C ‚•§ C where
  obj j := Œ¶.transfiniteIterationObj Œµ j
  map œÜ := Œ¶.transfiniteIterationMap Œµ (leOfHom œÜ)
  map_comp œÜ‚ÇÅ‚ÇÇ œÜ‚ÇÇ‚ÇÉ := Œ¶.transfiniteIterationMap_trans Œµ (leOfHom œÜ‚ÇÅ‚ÇÇ) (leOfHom œÜ‚ÇÇ‚ÇÉ)

variable {J}

variable (j : J)

/-- For any `j : J`, the restriction of the functor `Œ¶.transfiniteIterationFunctor Œµ J`
to `Set.Iic j` identifies to `(Œ¶.iteration Œµ j).F`. -/
@[simps!]
noncomputable def transfiniteIterationFunctorRestrictionLEIso (j : J) :
    (Œ¶.transfiniteIterationFunctor Œµ J).restrictionLE j ‚âÖ (Œ¶.iteration Œµ j).F :=
  NatIso.ofComponents (fun ‚ü®i, hi‚ü© ‚Ü¶ (Iteration.eval Œµ (le_refl i)).mapIso
      (Iteration.iso (Œ¶.iteration Œµ i) ((Œ¶.iteration Œµ j).trunc hi))) (by
        rintro ‚ü®k‚ÇÅ, hk‚ÇÅ : k‚ÇÅ ‚â§ j‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ : k‚ÇÇ ‚â§ j‚ü© œÜ
        have h : k‚ÇÅ ‚â§ k‚ÇÇ := leOfHom œÜ
        dsimp [transfiniteIterationMap]
        simp only [homOfLE_leOfHom, assoc, NatTrans.naturality, Iteration.restrictionLE_obj,
          Iteration.restrictionLE_map, Monotone.functor_obj]
        conv_rhs => rw [‚Üê Iteration.iso_hom_comp_iso_hom _ ((Œ¶.iteration Œµ k‚ÇÇ).trunc h) _]
        rw [‚Üê Iteration.iso_trunc_hom_natTrans_app _ _ h _ (by rfl)]
        dsimp
        rw [assoc]
        rfl)

/-- For any `j : J`, the restriction of the functor `Œ¶.transfiniteIterationFunctor Œµ J`
to `Set.Iio j` identifies the restriction of `(Œ¶.iteration Œµ j).F`. -/
@[simps!]
noncomputable def transfiniteIterationFunctorRestrictionLTIso (j : J) :
    (Œ¶.transfiniteIterationFunctor Œµ J).restrictionLT j ‚âÖ
      Iteration.restrictionLT (Œ¶.iteration Œµ j).F (le_refl j) :=
  isoWhiskerLeft (monotone_inclusion_lt_le_of_le (le_refl j)).functor
    (Œ¶.transfiniteIterationFunctorRestrictionLEIso Œµ j)

variable (J)

instance transfiniteIterationFunctor_isWellOrderContinuous :
    (Œ¶.transfiniteIterationFunctor Œµ J).IsWellOrderContinuous where
  nonempty_isColimit j hj :=
    ‚ü®(IsColimit.precomposeHomEquiv
      (Œ¶.transfiniteIterationFunctorRestrictionLTIso Œµ j).symm _).1
        (IsColimit.ofIsoColimit ((Œ¶.iteration Œµ j).isColimit j hj (le_refl j))
          (Cocones.ext (Iso.refl _) (fun ‚ü®k, hk‚ü© ‚Ü¶ by
            dsimp [transfiniteIterationMap]
            simp only [homOfLE_leOfHom, comp_id, ‚Üê NatTrans.comp_app_assoc,
              Iteration.restrictionLE_obj, ‚Üê Iteration.natTrans_comp, Iso.inv_hom_id,
              Iteration.natTrans_id, Iteration.trunc_F, NatTrans.id_app, id_comp])))‚ü©

/-- A colimit cocone of `Œ¶.transfiniteIterationFunctor Œµ J`,
with point `Œ¶.transfiniteIteration Œµ J`. -/
noncomputable def transfiniteIterationCocone : Cocone (Œ¶.transfiniteIterationFunctor Œµ J) :=
  colimit.cocone _

/-- `Œ¶.transfiniteIterationCocone Œµ J` is a colimit cocone,
with point `Œ¶.transfiniteIteration Œµ J`. -/
noncomputable def isColimitTransfiniteIterationCocone :
    IsColimit (Œ¶.transfiniteIterationCocone Œµ J) :=
  colimit.isColimit _

/-- Let `Œ¶ : C ‚•§ C` a functor and `Œµ : ùü≠ C ‚ü∂ Œ¶` be a natural transformation.
For any well-ordered type `J` such that suitable colimits exists
(condition `HasIterationOfShape C J`), this is the `J`-th iteration of the functor `Œ¶`. -/
noncomputable def transfiniteIteration : C ‚•§ C := (Œ¶.transfiniteIterationCocone Œµ J).pt

@[simp]
lemma transfiniteIterationCocone_pt :
    (Œ¶.transfiniteIterationCocone Œµ J).pt = Œ¶.transfiniteIteration Œµ J := rfl

/-- The inclusion `ùü≠ C ‚ü∂ Œ¶.transfiniteIteration Œµ J`. -/
noncomputable def ŒπTransfiniteIteration : ùü≠ C ‚ü∂ Œ¶.transfiniteIteration Œµ J :=
  Œ¶.ŒπTransfiniteIterationObj Œµ ‚ä• ‚â´ (Œ¶.transfiniteIterationCocone Œµ J).Œπ.app ‚ä•

variable {J} in
@[reassoc (attr := simp)]
lemma Œπ_transfiniteIterationCocone_Œπ_app (j : J) :
  Œ¶.ŒπTransfiniteIterationObj Œµ j ‚â´ (Œ¶.transfiniteIterationCocone Œµ J).Œπ.app j =
    Œ¶.ŒπTransfiniteIteration Œµ J := by
  simp [ŒπTransfiniteIteration, ‚Üê (Œ¶.transfiniteIterationCocone Œµ J).w (homOfLE bot_le : ‚ä• ‚ü∂ j),
    Œπ_transfiniteIterationMap_assoc]

@[reassoc (attr := simp)]
lemma transfiniteIterationObjBotIso_inv_Œπ :
    (Œ¶.transfiniteIterationObjBotIso Œµ J).inv ‚â´ ((Œ¶.transfiniteIterationCocone Œµ J).Œπ.app ‚ä•) =
      Œ¶.ŒπTransfiniteIteration Œµ J := by
  rw [‚Üê Œ¶.Œπ_transfiniteIterationCocone_Œπ_app Œµ (‚ä• : J), ‚Üê ŒπTransfiniteIterationObj_bot]

@[reassoc (attr := simp)]
lemma transfiniteIterationObjBotIso_inv_app_Œπ_app (X : C):
    (Œ¶.transfiniteIterationObjBotIso Œµ J).inv.app X ‚â´
      ((Œ¶.transfiniteIterationCocone Œµ J).Œπ.app ‚ä•).app X =
        (Œ¶.ŒπTransfiniteIteration Œµ J).app X := by
  simp [‚Üê transfiniteIterationObjBotIso_inv_Œπ]

section

variable (W : MorphismProperty C) [W.RespectsIso] (hŒµ : ‚àÄ (T : C), W (Œµ.app T))

include hŒµ

lemma transfiniteCompositionsOfShape_transfiniteIterationCocone_Œπ_app_bot :
    (W.functorCategory C).transfiniteCompositionsOfShape J
      ((Œ¶.transfiniteIterationCocone Œµ J).Œπ.app ‚ä•) :=
  ‚ü®_, fun j hj X ‚Ü¶ by
        dsimp
        rw [transfiniteIterationMap_le_succ _ _ _ hj]
        exact MorphismProperty.RespectsIso.postcomp _ _ _ (hŒµ _), _,
    Œ¶.isColimitTransfiniteIterationCocone Œµ J‚ü©

lemma transfiniteCompositionsOfShape_transfiniteIterationCocone_Œπ_app_bot_app (X : C) :
    W.transfiniteCompositionsOfShape J
      (((Œ¶.transfiniteIterationCocone Œµ J).Œπ.app ‚ä•).app X) :=
  ‚ü®_, fun j hj ‚Ü¶ by
        dsimp
        rw [transfiniteIterationMap_le_succ_app _ _ _ hj]
        exact MorphismProperty.RespectsIso.postcomp _ _ _ (hŒµ _), _,
    isColimitOfPreserves ((evaluation C C).obj X) (Œ¶.isColimitTransfiniteIterationCocone Œµ J)‚ü©

lemma transfiniteCompositionsOfShape_ŒπTransfiniteIteration_app (X : C) :
    W.transfiniteCompositionsOfShape J ((Œ¶.ŒπTransfiniteIteration Œµ J).app X) := by
  refine (MorphismProperty.arrow_mk_iso_iff _ ?_).2
    (Œ¶.transfiniteCompositionsOfShape_transfiniteIterationCocone_Œπ_app_bot_app Œµ J W hŒµ X)
  exact Arrow.isoMk ((Œ¶.transfiniteIterationObjBotIso Œµ J).app X).symm (Iso.refl _)

end

end Functor

end CategoryTheory
