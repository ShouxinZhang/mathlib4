/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Limits.FunctorCategory.Basic
import Mathlib.CategoryTheory.SmallObject.Iteration.ExtendToSucc
import Mathlib.CategoryTheory.SmallObject.Iteration.FunctorOfCocone
import Mathlib.CategoryTheory.SmallObject.Iteration.UniqueHom

/-!
# Existence of objects in the category of iterations of functors

Given a functor `Œ¶ : C ‚•§ C` and a natural transformation `Œµ : ùü≠ C ‚ü∂ Œ¶`,
we shall show in this file that for any well ordered set `J`,
and `j : J`, the category `Functor.Iteration Œµ j` is nonempty.
As we already know from the main result in `SmallObject.Iteration.UniqueHom`
that such objects, if they exist, are unique up to a unique isomorphism,
we shall show the existence of a term in `Functor.Iteration Œµ j` by
transfinite induction.

-/

universe u

namespace CategoryTheory

open Category Limits

variable {C : Type*} [Category C] {Œ¶ : C ‚•§ C} {Œµ : ùü≠ C ‚ü∂ Œ¶}
  {J : Type u} [LinearOrder J] [OrderBot J] [SuccOrder J]

namespace Functor

namespace Iteration

variable (Œµ J) in
/-- The obvious term in `Iteration Œµ ‚ä•`: it is given by the identity functor. -/
def mkOfBot : Iteration Œµ (‚ä• : J) where
  F := (Functor.const _).obj (ùü≠ C)
  isoZero := Iso.refl _
  isoSucc _ h := by simp at h
  mapSucc'_eq _ h := by simp at h
  isColimit x hx h := by
    exfalso
    refine hx.not_isMin (by simpa using h)

/-- When `j : J` is not maximal, this is the extension as `Iteration Œµ (Order.succ j)`
of any `iter : Iteration Œµ j`. -/
noncomputable def mkOfSucc {j : J} (hj : ¬¨IsMax j) (iter : Iteration Œµ j) :
    Iteration Œµ (Order.succ j) where
  F := extendToSucc hj iter.F (whiskerLeft _ Œµ)
  isoZero := (extendToSuccObjIso hj iter.F (whiskerLeft _ Œµ) ‚ü®‚ä•, by simp‚ü©).trans iter.isoZero
  isoSucc i hi :=
    if hij : i < j then
      extendToSuccObjIso _ _ _ ‚ü®Order.succ i, Order.succ_le_of_lt hij‚ü© ‚â™‚â´
        iter.isoSucc i hij ‚â™‚â´ (isoWhiskerRight (extendToSuccObjIso _ _ _ ‚ü®i, hij.le‚ü©).symm _)
    else
      have hij' : i = j := le_antisymm
        (by simpa only [Order.lt_succ_iff_of_not_isMax hj] using hi) (by simpa using hij)
      eqToIso (by subst hij'; rfl) ‚â™‚â´ extendToSuccObjSuccIso hj iter.F (whiskerLeft _ Œµ) ‚â™‚â´
        isoWhiskerRight ((extendToSuccObjIso hj iter.F (whiskerLeft _ Œµ) ‚ü®j, by simp‚ü©).symm.trans
            (eqToIso (by subst hij'; rfl))) _
  mapSucc'_eq i hi := by
    obtain hi' | rfl := ((Order.lt_succ_iff_of_not_isMax hj).mp hi).lt_or_eq
    ¬∑ ext X
      have := iter.mapSucc_eq i hi'
      dsimp [mapSucc, mapSucc'] at this ‚ä¢
      rw [extentToSucc_map _ _ _ _ _ _ (Order.succ_le_of_lt hi'), this, dif_pos hi']
      dsimp
      rw [assoc, assoc]
      erw [Œµ.naturality_assoc]
    ¬∑ ext X
      dsimp [mapSucc']
      rw [dif_neg (gt_irrefl i), extendToSucc_map_le_succ]
      dsimp
      rw [id_comp, comp_id]
      erw [Œµ.naturality_assoc]
  isColimit i hi hij := by
    have hij' : i ‚â§ j := by
      obtain hij | rfl := hij.lt_or_eq
      ¬∑ exact (Order.lt_succ_iff_of_not_isMax hj).1 hij
      ¬∑ exfalso
        exact Order.not_isSuccLimit_succ_of_not_isMax hj hi
    refine (IsColimit.precomposeHomEquiv
      (isoWhiskerLeft (monotone_inclusion_lt_le_of_le hij').functor
        (extendToSuccRestrictionLEIso hj iter.F (whiskerLeft _ Œµ))).symm _).1
      (IsColimit.ofIsoColimit (iter.isColimit i hi hij')
      (Iso.symm (Cocones.ext (extendToSuccObjIso hj iter.F (whiskerLeft _ Œµ) ‚ü®i, hij'‚ü©)
      (fun ‚ü®k, hk‚ü© ‚Ü¶ ?_))))
    dsimp
    rw [assoc, extendToSuccObjIso_hom_naturality hj iter.F (whiskerLeft _ Œµ)]
    dsimp
    rw [Iso.inv_hom_id_assoc]

section

variable [WellFoundedLT J] {j : J} (hj : Order.IsSuccLimit j)
  (iter : ‚àÄ (i : J) (_ : i < j), Iteration Œµ i)

namespace mkOfLimit

/-- Auxiliary definition for `mkOfLimit`. -/
noncomputable def map (i‚ÇÅ i‚ÇÇ : J) (hi : i‚ÇÅ ‚â§ i‚ÇÇ) (hi‚ÇÇ : i‚ÇÇ < j) :
    (iter i‚ÇÅ (lt_of_le_of_lt hi hi‚ÇÇ)).F.obj ‚ü®i‚ÇÅ, by simp‚ü© ‚ü∂ (iter i‚ÇÇ hi‚ÇÇ).F.obj ‚ü®i‚ÇÇ, by simp‚ü© :=
  ((iter i‚ÇÅ (lt_of_le_of_lt hi hi‚ÇÇ)).iso ((iter i‚ÇÇ hi‚ÇÇ).trunc hi)).hom.natTrans.app
    ‚ü®i‚ÇÅ, by simp‚ü© ‚â´ (iter i‚ÇÇ hi‚ÇÇ).F.map (homOfLE hi)

@[simp]
lemma map_id (i : J) (hi : i < j) :
    map iter i i (by rfl) hi = ùüô _ := by
  simp [map]

lemma map_comp (i‚ÇÅ i‚ÇÇ i‚ÇÉ : J) (hi : i‚ÇÅ ‚â§ i‚ÇÇ) (hi' : i‚ÇÇ ‚â§ i‚ÇÉ) (hi‚ÇÉ : i‚ÇÉ < j) :
    map iter i‚ÇÅ i‚ÇÉ (hi.trans hi') hi‚ÇÉ =
      map iter i‚ÇÅ i‚ÇÇ hi (lt_of_le_of_lt hi' hi‚ÇÉ) ‚â´
        map iter i‚ÇÇ i‚ÇÉ hi' hi‚ÇÉ := by
  dsimp [map]
  rw [assoc, NatTrans.naturality_assoc]
  dsimp
  rw [‚Üê truncFunctor_map_natTrans_app _ hi i‚ÇÅ (by rfl), truncFunctor_map_iso_hom,
    ‚Üê NatTrans.comp_app_assoc, ‚Üê natTrans_comp, ‚Üê Functor.map_comp]
  dsimp only [truncFunctor_obj, trunc_trunc]
  rw [iso_hom_comp_iso_hom, homOfLE_comp]

/-- Auxiliary definition for `mkOfLimit`. -/
@[simps]
noncomputable def functor : Set.Iio j ‚•§ C ‚•§ C where
  obj i := (iter i.1 i.2).F.obj ‚ü®i.1, by simp‚ü©
  map f := map iter _ _ (leOfHom f) _
  map_id _ := map_id iter _ _
  map_comp _ _ := map_comp iter _ _ _ _ _ _

/-- Auxiliary definition for `mkOfLimit`. -/
noncomputable def restrictionLTFunctorIso (i : J) (hi : i < j) :
    (monotone_inclusion_lt_lt_of_le hi.le).functor ‚ãô functor iter ‚âÖ
      restrictionLT (iter i hi).F (by rfl) :=
  NatIso.ofComponents (fun ‚ü®k, hk‚ü© ‚Ü¶ (eval Œµ (Preorder.le_refl k)).mapIso
    ((iter k (hk.trans hi)).iso ((iter i hi).trunc hk.le))) (by
      rintro ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© f
      dsimp [map]
      rw [assoc, NatTrans.naturality]
      dsimp
      simp only [‚Üê assoc]; congr 1
      dsimp
      rw [‚Üê truncFunctor_map_natTrans_app _ (i := k‚ÇÅ) (j := k‚ÇÇ) (leOfHom f) _ (by rfl),
        truncFunctor_map_iso_hom, ‚Üê NatTrans.comp_app, ‚Üê natTrans_comp]
      erw [iso_hom_comp_iso_hom]
      rfl)

@[reassoc]
lemma restrictionLTFunctorIso_inv_app_map (k i : J) (hik : k < i) (hij : i < j) :
    (restrictionLTFunctorIso iter i hij).inv.app ‚ü®k, hik‚ü© ‚â´ map iter k i hik.le hij =
      (iter i hij).F.map (homOfLE hik.le) := by
  dsimp [restrictionLTFunctorIso, map]
  rw [‚Üê NatTrans.comp_app_assoc, ‚Üê natTrans_comp, Iso.inv_hom_id, natTrans_id,
    NatTrans.id_app]
  dsimp
  rw [id_comp]

end mkOfLimit

open mkOfLimit

variable [HasColimit (functor iter)]

include hj iter in
/-- When `j : J` satisfies `Order.IsSuccLimit j` and we have `iter i hij : Iteration Œµ i`
for any `i : J` such that `hij : i < j`, then this is a term in `Iteration Œµ j`,
provided a suitable colimit indexed by `Set.Iio j` exists. -/
noncomputable def mkOfLimit :
    Iteration Œµ j where
  F := Functor.ofCocone (colimit.cocone (functor iter))
  isoZero := (Functor.ofCoconeObjIso _ ‚ä• (Ne.bot_lt (by simpa using hj.1))).trans
    ((iter ‚ä• _).isoZero)
  isoSucc i hi :=
    Functor.ofCoconeObjIso _ (Order.succ i) ((Order.IsSuccLimit.succ_lt_iff hj).2 hi) ‚â™‚â´
      (iter (Order.succ i) ((Order.IsSuccLimit.succ_lt_iff hj).2 hi)).isoSucc i (by
        rw [Order.lt_succ_iff_not_isMax, not_isMax_iff]
        exact ‚ü®_, hi‚ü©) ‚â™‚â´
        isoWhiskerRight ((Iteration.eval Œµ (Preorder.le_refl i)).mapIso
            (((iter (Order.succ i) _).trunc (Order.le_succ i)).iso (iter i hi)) ‚â™‚â´
            (Functor.ofCoconeObjIso (colimit.cocone (functor iter)) i hi).symm) Œ¶
  mapSucc'_eq i hi := by
    have hi' : Order.succ i < j := (Order.IsSuccLimit.succ_lt_iff hj).mpr hi
    have hi'' : i < Order.succ i := by
      simp only [Order.lt_succ_iff_not_isMax, not_isMax_iff]
      exact ‚ü®_, hi‚ü©
    have := (iter _ hi').mapSucc_eq i hi''
    dsimp [mapSucc', mapSucc] at this ‚ä¢
    rw [ofCocone_map _ _ _ _ hi', functor_map, map, this]
    ext X
    dsimp
    rw [assoc, assoc, assoc, map_comp_assoc]
    erw [‚Üê Œµ.naturality_assoc, ‚Üê Œµ.naturality_assoc]
    rfl
  isColimit i hi hij := by
    apply Nonempty.some
    obtain hij' | rfl := hij.lt_or_eq
    ¬∑ refine ‚ü®(IsColimit.precomposeInvEquiv
        (isoWhiskerLeft (monotone_inclusion_lt_lt_of_le hij).functor
          (restrictionLTOfCoconeIso (colimit.cocone (functor iter))) ‚â™‚â´
          restrictionLTFunctorIso iter i hij') _).1
        (IsColimit.ofIsoColimit ((iter i hij').isColimit i hi (by rfl))
        (Cocones.ext
          (ofCoconeObjIso (colimit.cocone (functor iter)) i hij').symm (fun ‚ü®k, hk‚ü© ‚Ü¶ ?_)))‚ü©
      dsimp
      rw [ofCocone_map _ _ _ _ hij', assoc]
      dsimp
      rw [Iso.inv_hom_id_assoc, restrictionLTFunctorIso_inv_app_map_assoc]
    ¬∑ exact ‚ü®Functor.isColimitCoconeOfLEOfCocone (colimit.isColimit _)‚ü©

end

instance [WellFoundedLT J] [HasIterationOfShape C J] (j : J) : Nonempty (Iteration Œµ j) := by
  induction j using SuccOrder.limitRecOn with
  | hm i hi =>
      obtain rfl : i = ‚ä• := by simpa using hi
      exact ‚ü®mkOfBot Œµ J‚ü©
  | hs i hi hi' => exact ‚ü®mkOfSucc hi hi'.some‚ü©
  | hl i hi hi' =>
      have := hasColimitsOfShape_of_isSuccLimit C i hi
      exact ‚ü®mkOfLimit hi (fun a ha ‚Ü¶ (hi' a ha).some)‚ü©

end Iteration

end Functor

end CategoryTheory
