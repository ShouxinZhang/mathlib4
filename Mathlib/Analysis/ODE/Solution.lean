/-
Copyright (c) 2024 Winston Yin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Winston Yin
-/
import Mathlib.Analysis.SpecialFunctions.Integrals
import Mathlib.Topology.MetricSpace.Contracting

-- remember to fix copyright

/-!
Attempt to unify `Gronwall` and `PicardLindelof` and prepare for `LocalFlow`

Strategy:
* Define new structure `ODESolution v t‚ÇÄ s x‚ÇÄ` which contains local solutions to the vector field
  `v`.
* Show that under certain conditions, `ODESolution v t‚ÇÄ s x‚ÇÄ` is equivalent to satisfying an
  integral equation.
* All properties of solutions will be proved using `ODESolution`, rather than extracting `f` from
  `v` every time. <-- this is the key motivation
* Initially, we keep using coercion from `PicardLindelofData` to `‚Ñù ‚Üí E ‚Üí E`, but at some point we
  restrict ourselves to `C^p` vector fields

To consider:
* Time-independent `ODESolution`? Show equivalence?
* Not strictly a generalisation of `PicardLindelof` in cases of closed intervals (how to reconcile?)

-/

open Function Metric Set
open scoped NNReal Topology

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]

/-
equivalent integral equation
remark p.67
-/
noncomputable def iterateIntegral (f : ‚Ñù ‚Üí E ‚Üí E) (t‚ÇÄ : ‚Ñù) (x‚ÇÄ : E) (Œ± : ‚Ñù ‚Üí E) : ‚Ñù ‚Üí E :=
  fun t ‚Ü¶ x‚ÇÄ + ‚à´ œÑ in t‚ÇÄ..t, f œÑ (Œ± œÑ)

@[simp]
lemma iterateIntegral_apply {f : ‚Ñù ‚Üí E ‚Üí E} {Œ± : ‚Ñù ‚Üí E} {t‚ÇÄ : ‚Ñù} {x‚ÇÄ : E} {t : ‚Ñù} :
    iterateIntegral f t‚ÇÄ x‚ÇÄ Œ± t = x‚ÇÄ + ‚à´ œÑ in t‚ÇÄ..t, f œÑ (Œ± œÑ) := rfl

-- `fun t ‚Ü¶ f t (Œ± t)` is C^n if `f` and `Œ±` are C^n
-- rename! this is more general than `Ioo`
lemma contDiffOn_curve_comp {f : ‚Ñù ‚Üí E ‚Üí E} {Œ± : ‚Ñù ‚Üí E} {u : Set E}
    {s : Set ‚Ñù} {n : WithTop ‚Ñï‚àû}
    (hf : ContDiffOn ‚Ñù n (uncurry f) (s √óÀ¢ u))
    (hŒ± : ContDiffOn ‚Ñù n Œ± s)
    (hmem : ‚àÄ t ‚àà s, Œ± t ‚àà u) :
    ContDiffOn ‚Ñù n (fun t ‚Ü¶ f t (Œ± t)) s := by
  have : (fun t ‚Ü¶ f t (Œ± t)) = (uncurry f) ‚àò fun t ‚Ü¶ (t, Œ± t) := rfl
  rw [this]
  apply hf.comp <| contDiffOn_id.prod hŒ±
  intro _ ht
  rw [mem_prod]
  exact ‚ü®ht, hmem _ ht‚ü©

-- rename!
lemma continuousOn_curve_comp {f : ‚Ñù ‚Üí E ‚Üí E} {Œ± : ‚Ñù ‚Üí E} {u : Set E}
    {s : Set ‚Ñù}
    (hf : ContinuousOn (uncurry f) (s √óÀ¢ u))
    (hŒ± : ContinuousOn Œ± s)
    (hmem : ‚àÄ t ‚àà s, Œ± t ‚àà u) :
    ContinuousOn (fun t ‚Ü¶ f t (Œ± t)) s :=
  contDiffOn_zero.mp <| contDiffOn_curve_comp (contDiffOn_zero.mpr hf) (contDiffOn_zero.mpr hŒ±) hmem

-- the integral equation has derivative `fun t ‚Ü¶ f t (Œ± t)`
-- TODO: generalise to any convex `s`
lemma hasDerivAt_iterateIntegral_Ioo [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E) (Œ± : ‚Ñù ‚Üí E) {u : Set E}
    {tmin tmax t‚ÇÄ : ‚Ñù}
    (hf : ContinuousOn (uncurry f) ((Ioo tmin tmax) √óÀ¢ u))
    (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo tmin tmax) (hŒ± : ContinuousOn Œ± (Ioo tmin tmax))
    (hmem : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t ‚àà u) (x‚ÇÄ : E)
    {t : ‚Ñù} (ht : t ‚àà Ioo tmin tmax) :
    HasDerivAt (iterateIntegral f t‚ÇÄ x‚ÇÄ Œ±) (f t (Œ± t)) t := by
  unfold iterateIntegral
  apply HasDerivAt.const_add
  apply intervalIntegral.integral_hasDerivAt_right -- need `CompleteSpace E`
  ¬∑ apply ContinuousOn.intervalIntegrable
    apply continuousOn_curve_comp hf hŒ± hmem |>.mono
    by_cases h : t < t‚ÇÄ
    ¬∑ rw [uIcc_of_gt h]
      exact Icc_subset_Ioo ht.1 ht‚ÇÄ.2
    ¬∑ rw [uIcc_of_le (not_lt.mp h)]
      exact Icc_subset_Ioo ht‚ÇÄ.1 ht.2
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem |>.stronglyMeasurableAtFilter isOpen_Ioo _ ht
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem |>.continuousAt <| Ioo_mem_nhds ht.1 ht.2

-- code duplication with `Ioo` case above
lemma hasDerivWithinAt_iterateIntegral_Icc [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E) (Œ± : ‚Ñù ‚Üí E) {u : Set E}
    {tmin tmax t‚ÇÄ : ‚Ñù}
    (hf : ContinuousOn (uncurry f) ((Icc tmin tmax) √óÀ¢ u))
    (ht‚ÇÄ : t‚ÇÄ ‚àà Icc tmin tmax) (hŒ± : ContinuousOn Œ± (Icc tmin tmax))
    (hmem : ‚àÄ t ‚àà Icc tmin tmax, Œ± t ‚àà u) (x‚ÇÄ : E)
    {t : ‚Ñù} (ht : t ‚àà Icc tmin tmax) :
    HasDerivWithinAt (iterateIntegral f t‚ÇÄ x‚ÇÄ Œ±) (f t (Œ± t)) (Icc tmin tmax) t := by
  unfold iterateIntegral
  apply HasDerivWithinAt.const_add
  have : Fact (t ‚àà Icc tmin tmax) := ‚ü®ht‚ü© -- needed to synthesise FTCFilter for Icc
  apply intervalIntegral.integral_hasDerivWithinAt_right -- need `CompleteSpace E`
  ¬∑ apply ContinuousOn.intervalIntegrable
    apply continuousOn_curve_comp hf hŒ± hmem |>.mono
    by_cases h : t < t‚ÇÄ
    ¬∑ rw [uIcc_of_gt h]
      exact Icc_subset_Icc ht.1 ht‚ÇÄ.2
    ¬∑ rw [uIcc_of_le (not_lt.mp h)]
      exact Icc_subset_Icc ht‚ÇÄ.1 ht.2
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem
      |>.stronglyMeasurableAtFilter_nhdsWithin measurableSet_Icc t
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem _ ht

lemma deriv_iterateIntegral [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E) (Œ± : ‚Ñù ‚Üí E) {u : Set E}
    {tmin tmax t‚ÇÄ : ‚Ñù}
    (hf : ContinuousOn (uncurry f) ((Ioo tmin tmax) √óÀ¢ u))
    (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo tmin tmax) (hŒ± : ContinuousOn Œ± (Ioo tmin tmax))
    (hmem : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t ‚àà u) (x‚ÇÄ : E)
    {t : ‚Ñù} (ht : t ‚àà Ioo tmin tmax) :
    deriv (iterateIntegral f t‚ÇÄ x‚ÇÄ Œ±) t = f t (Œ± t) := by
  -- use FTC2 `intervalIntegral.deriv_integral_right`
  unfold iterateIntegral -- add _eq lemma
  rw [deriv_const_add']
  -- code duplication below this
  apply intervalIntegral.deriv_integral_right
  ¬∑ apply ContinuousOn.intervalIntegrable
    apply continuousOn_curve_comp hf hŒ± hmem |>.mono
    by_cases h : t < t‚ÇÄ
    ¬∑ rw [uIcc_of_gt h]
      exact Icc_subset_Ioo ht.1 ht‚ÇÄ.2
    ¬∑ rw [uIcc_of_le (not_lt.mp h)]
      exact Icc_subset_Ioo ht‚ÇÄ.1 ht.2
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem |>.stronglyMeasurableAtFilter isOpen_Ioo _ ht
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem |>.continuousAt <| Ioo_mem_nhds ht.1 ht.2

-- the integral equation transfers smoothness class from `f` to `Œ±`
-- TODO: generalise `n` to `‚àû` and maybe `œâ`
lemma contDiffOn_nat_iterateIntegral_Ioo [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E) (Œ± : ‚Ñù ‚Üí E) {u : Set E}
    {tmin tmax t‚ÇÄ : ‚Ñù} {n : ‚Ñï}
    (hf : ContDiffOn ‚Ñù n (uncurry f) ((Ioo tmin tmax) √óÀ¢ u))
    (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo tmin tmax) (hŒ± : ContinuousOn Œ± (Ioo tmin tmax))
    (hmem : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t ‚àà u) (x‚ÇÄ : E)
    (heqon : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t = iterateIntegral f t‚ÇÄ x‚ÇÄ Œ± t) :
    ContDiffOn ‚Ñù n (iterateIntegral f t‚ÇÄ x‚ÇÄ Œ±) (Ioo tmin tmax) := by
  induction n with
  | zero =>
    simp only [CharP.cast_eq_zero, contDiffOn_zero] at *
    apply HasDerivAt.continuousOn (f' := fun t ‚Ü¶ f t (Œ± t))
    intro _ ht
    exact hasDerivAt_iterateIntegral_Ioo f Œ± hf ht‚ÇÄ hŒ± hmem x‚ÇÄ ht
  | succ n hn =>
    simp only [Nat.cast_add, Nat.cast_one] at *
    rw [contDiffOn_succ_iff_deriv_of_isOpen isOpen_Ioo] -- check this for generalisation to `œâ`
    refine ‚ü®?_, by simp, ?_‚ü©
    ¬∑ intro _ ht
      apply DifferentiableAt.differentiableWithinAt
      exact HasDerivAt.differentiableAt <|
        hasDerivAt_iterateIntegral_Ioo f Œ± hf.continuousOn ht‚ÇÄ hŒ± hmem x‚ÇÄ ht
    ¬∑ have hŒ±' : ContDiffOn ‚Ñù n Œ± (Ioo tmin tmax) := by
        apply ContDiffOn.congr _ heqon
        apply hn
        exact hf.of_succ
      apply contDiffOn_curve_comp hf.of_succ hŒ±' hmem |>.congr
      intro _ ht
      exact deriv_iterateIntegral f Œ± hf.continuousOn ht‚ÇÄ hŒ± hmem x‚ÇÄ ht

lemma contDiffOn_enat_iterateIntegral_Ioo [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E) (Œ± : ‚Ñù ‚Üí E) {u : Set E}
    {tmin tmax t‚ÇÄ : ‚Ñù} {n : ‚Ñï‚àû}
    (hf : ContDiffOn ‚Ñù n (uncurry f) ((Ioo tmin tmax) √óÀ¢ u))
    (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo tmin tmax) (hŒ± : ContinuousOn Œ± (Ioo tmin tmax))
    (hmem : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t ‚àà u) (x‚ÇÄ : E)
    (heqon : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t = iterateIntegral f t‚ÇÄ x‚ÇÄ Œ± t) :
    ContDiffOn ‚Ñù n (iterateIntegral f t‚ÇÄ x‚ÇÄ Œ±) (Ioo tmin tmax) := by
  induction n with
  | top =>
    rw [contDiffOn_infty] at *
    intro k
    exact contDiffOn_nat_iterateIntegral_Ioo _ _ (hf k) ht‚ÇÄ hŒ± hmem x‚ÇÄ heqon
  | coe n =>
    simp only [WithTop.coe_natCast] at *
    exact contDiffOn_nat_iterateIntegral_Ioo _ _ hf ht‚ÇÄ hŒ± hmem _ heqon

-- generalise to `œâ`?

/-
prop 1.1 existence of local flow

J : open interval of ‚Ñù containing 0
  `Ioo tmin tmax` containing 0 (generalise to `t‚ÇÄ`?)
U : open in banach space E containing x‚ÇÄ
  `u ‚àà ùìù x‚ÇÄ`
  but here this is implied by `closedBall x‚ÇÄ (3 * a) ‚äÜ u`
  why `0 < a < 1`?
f : J √ó U ‚Üí E continuous, K-lipschitz
  `f : ‚Ñù ‚Üí E ‚Üí E` with `ContinuousOn (uncurry f) (J √ó U)`,
  `‚àÄ t ‚àà J, LipschitzOnWith (f t) u K`
a : ‚Ñù so that `closedBall x‚ÇÄ (3 * a) ‚äÜ u`
b : ‚Ñù so that eventually we get integral curve Œ± : Ioo (-b) b ‚Üí E
  `b = (tmax - tmin) / 2`
Œ± : Œ±_x (t) is the integral curve starting at x
  `Œ± : E ‚Üí ‚Ñù ‚Üí E` with `Œ± x t` meaning `Œ± x` is an integral curve starting at `x`
-/


-- [MetricSpace Œ±] ‚Üí ContractingWith K f ‚Üí [inst_1 : Nonempty Œ±] ‚Üí [inst : CompleteSpace Œ±] ‚Üí Œ±



/-- The type of continuous maps  -/
-- change order of arguments
-- no need to extend `ContinuousMapClass` because this is a one-time use
@[ext]
structure SpaceOfCurves (x‚ÇÄ : E) {t‚ÇÄ tmin tmax : ‚Ñù} (ht : t‚ÇÄ ‚àà Icc tmin tmax) -- need compact domain
    (a : ‚Ñù‚â•0) extends C(Icc tmin tmax, E) where
  -- this makes future proof obligations simpler syntactically
  mapsTo : ‚àÄ t : Icc tmin tmax, toFun t ‚àà closedBall x‚ÇÄ a -- plug in `a := 2 * a` in proofs
  initial : toFun ‚ü®t‚ÇÄ, ht‚ü© = x‚ÇÄ

namespace SpaceOfCurves

variable (x‚ÇÄ : E) {t‚ÇÄ tmin tmax : ‚Ñù} (ht‚ÇÄ : t‚ÇÄ ‚àà Icc tmin tmax) (a : ‚Ñù‚â•0)

-- need `toFun_eq_coe`?

instance : CoeFun (SpaceOfCurves x‚ÇÄ ht‚ÇÄ a) fun _ ‚Ü¶ Icc tmin tmax ‚Üí E := ‚ü®fun Œ± ‚Ü¶ Œ±.toFun‚ü©

instance : Inhabited (SpaceOfCurves x‚ÇÄ ht‚ÇÄ a) :=
  ‚ü®‚ü®fun _ ‚Ü¶ x‚ÇÄ, continuous_const‚ü©, fun _ ‚Ü¶ mem_closedBall_self a.2, rfl‚ü©

noncomputable instance : MetricSpace (SpaceOfCurves x‚ÇÄ ht‚ÇÄ a) :=
  MetricSpace.induced toContinuousMap (fun _ _ _ ‚Ü¶ by ext; congr) inferInstance

/-- `iterateIntegral` maps `SpaceOfCurves` to `SpaceOfCurves` -/
-- move `Œ±` to target type to simplify proof syntax?
-- abstract components of this?
-- distill `3 * a` and `2 * a`?
noncomputable def iterate [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E)
    (hf : ContinuousOn (uncurry f) ((Icc tmin tmax) √óÀ¢ closedBall x‚ÇÄ (3 * a)))
    -- generalise to `u` containing ball?


    -- copy here assumptions on `f` from below


    (Œ± : SpaceOfCurves x‚ÇÄ ht‚ÇÄ (2 * a)) : SpaceOfCurves x‚ÇÄ ht‚ÇÄ (2 * a) :=
  { toFun := iterateIntegral f t‚ÇÄ x‚ÇÄ (Œ± ‚àò (projIcc _ _ (le_trans ht‚ÇÄ.1 ht‚ÇÄ.2))) ‚àò Subtype.val
    continuous_toFun := by
      apply ContinuousOn.comp_continuous _ continuous_subtype_val Subtype.coe_prop
      intro t ht
      apply hasDerivWithinAt_iterateIntegral_Icc
        f (Œ± ‚àò (projIcc _ _ (le_trans ht‚ÇÄ.1 ht‚ÇÄ.2))) hf ht‚ÇÄ _ _ _ ht |>.continuousWithinAt
      ¬∑ exact Œ±.continuous_toFun.comp_continuousOn continuous_projIcc.continuousOn
      ¬∑ intro t' ht' -- why need to be `3 * a`?
        rw [comp_apply]
        apply mem_of_mem_of_subset (Œ±.mapsTo _) (closedBall_subset_closedBall _)
        rw [NNReal.coe_mul, NNReal.coe_ofNat]
        exact mul_le_mul_of_nonneg_right (by norm_num) a.2
    mapsTo := by
      intro t
      simp only [NNReal.coe_mul, NNReal.coe_ofNat, ContinuousMap.toFun_eq_coe, comp_apply,
        iterateIntegral_apply, mem_closedBall, dist_self_add_left]
      -- inequality of norm of integral

      sorry
    initial := by simp only [ContinuousMap.toFun_eq_coe, comp_apply, iterateIntegral_apply,
        intervalIntegral.integral_same, add_zero] }

end SpaceOfCurves



-- K is NNReal because of LipschitzOnWith
-- prop 1.1 is stated strangely at the end
-- theorem exist_localFlow {tmin tmax L a b : ‚Ñù} {u : Set E} {x‚ÇÄ : E} (hu : closedBall x‚ÇÄ (3 * a) ‚äÜ u)
--     {f : ‚Ñù ‚Üí E ‚Üí E} {K : ‚Ñù‚â•0} (hb : 0 < b)
--     (hcont‚ÇÅ : ‚àÄ x ‚àà u, ContinuousOn (f ¬∑ x) (Ioo tmin tmax))
--     (hcont‚ÇÇ : ‚àÄ t ‚àà Ioo tmin tmax, ContinuousOn (f t) u)
--     (hle : ‚àÄ t ‚àà Ioo tmin tmax, ‚àÄ x ‚àà u, ‚Äñf t x‚Äñ ‚â§ L)
--     (hlip : ‚àÄ t ‚àà Ioo tmin tmax, LipschitzOnWith K (f t) u)
--     (hlt : b * L * K < a) :
--   ‚àÉ Œ± : E ‚Üí ‚Ñù ‚Üí E, ‚àÄ x ‚àà closedBall x‚ÇÄ a, Œ± x 0 = x ‚àß
--     ‚àÄ t ‚àà Ioo (-b) b, Œ± x t ‚àà u ‚àß HasDerivAt (Œ± x) (f t (Œ± x t)) t := sorry

-- corollary: existence of a single integral curve

theorem exist_localIntegralCurve {tmin tmax L a b : ‚Ñù} {u : Set E} {x‚ÇÄ : E}
    (hu : closedBall x‚ÇÄ (3 * a) ‚äÜ u)
    {f : ‚Ñù ‚Üí E ‚Üí E} {K : ‚Ñù‚â•0} (hb : 0 < b)
    (hcont‚ÇÅ : ‚àÄ x ‚àà u, ContinuousOn (f ¬∑ x) (Ioo tmin tmax))
    (hcont‚ÇÇ : ‚àÄ t ‚àà Ioo tmin tmax, ContinuousOn (f t) u)
    (hle : ‚àÄ t ‚àà Ioo tmin tmax, ‚àÄ x ‚àà u, ‚Äñf t x‚Äñ ‚â§ L)
    (hlip : ‚àÄ t ‚àà Ioo tmin tmax, LipschitzOnWith K (f t) u)
    (hlt : b * L * K < a) {x : E} (hx : x ‚àà closedBall x‚ÇÄ a) :
  ‚àÉ Œ± : ‚Ñù ‚Üí E, Œ± 0 = x ‚àß
    ‚àÄ t ‚àà Ioo (-b) b, Œ± t ‚àà u ‚àß HasDerivAt Œ± (f t (Œ± t)) t := sorry

-- provide the unique fixed point using `fixedPoint`
