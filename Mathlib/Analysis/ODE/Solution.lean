/-
Copyright (c) 2024 Winston Yin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Winston Yin
-/
import Mathlib.Analysis.SpecialFunctions.Integrals
import Mathlib.Topology.MetricSpace.Contracting

-- remember to fix copyright

/-!
Attempt to unify `Gronwall` and `PicardLindelof` and prepare for `LocalFlow`

Strategy:
* Define new structure `ODESolution v t‚ÇÄ s x‚ÇÄ` which contains local solutions to the vector field
  `v`.
* Show that under certain conditions, `ODESolution v t‚ÇÄ s x‚ÇÄ` is equivalent to satisfying an
  integral equation.
* All properties of solutions will be proved using `ODESolution`, rather than extracting `f` from
  `v` every time. <-- this is the key motivation
* Initially, we keep using coercion from `PicardLindelofData` to `‚Ñù ‚Üí E ‚Üí E`, but at some point we
  restrict ourselves to `C^p` vector fields

To consider:
* Time-independent `ODESolution`? Show equivalence?
* Not strictly a generalisation of `PicardLindelof` in cases of closed intervals (how to reconcile?)

-/

open Function MeasureTheory Metric Set
open scoped NNReal Topology

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]

/-
equivalent integral equation
remark p.67
-/
noncomputable def iterateIntegral (f : ‚Ñù ‚Üí E ‚Üí E) (t‚ÇÄ : ‚Ñù) (x‚ÇÄ : E) (Œ± : ‚Ñù ‚Üí E) : ‚Ñù ‚Üí E :=
  fun t ‚Ü¶ x‚ÇÄ + ‚à´ œÑ in t‚ÇÄ..t, f œÑ (Œ± œÑ)

@[simp]
lemma iterateIntegral_apply {f : ‚Ñù ‚Üí E ‚Üí E} {Œ± : ‚Ñù ‚Üí E} {t‚ÇÄ : ‚Ñù} {x‚ÇÄ : E} {t : ‚Ñù} :
    iterateIntegral f t‚ÇÄ x‚ÇÄ Œ± t = x‚ÇÄ + ‚à´ œÑ in t‚ÇÄ..t, f œÑ (Œ± œÑ) := rfl

-- `fun t ‚Ü¶ f t (Œ± t)` is C^n if `f` and `Œ±` are C^n
-- rename! this is more general than `Ioo`
lemma contDiffOn_curve_comp {f : ‚Ñù ‚Üí E ‚Üí E} {Œ± : ‚Ñù ‚Üí E} {u : Set E}
    {s : Set ‚Ñù} {n : WithTop ‚Ñï‚àû}
    (hf : ContDiffOn ‚Ñù n (uncurry f) (s √óÀ¢ u))
    (hŒ± : ContDiffOn ‚Ñù n Œ± s)
    (hmem : ‚àÄ t ‚àà s, Œ± t ‚àà u) :
    ContDiffOn ‚Ñù n (fun t ‚Ü¶ f t (Œ± t)) s := by
  have : (fun t ‚Ü¶ f t (Œ± t)) = (uncurry f) ‚àò fun t ‚Ü¶ (t, Œ± t) := rfl
  rw [this]
  apply hf.comp <| contDiffOn_id.prod hŒ±
  intro _ ht
  rw [mem_prod]
  exact ‚ü®ht, hmem _ ht‚ü©

-- rename!
lemma continuousOn_curve_comp {f : ‚Ñù ‚Üí E ‚Üí E} {Œ± : ‚Ñù ‚Üí E} {u : Set E}
    {s : Set ‚Ñù}
    (hf : ContinuousOn (uncurry f) (s √óÀ¢ u))
    (hŒ± : ContinuousOn Œ± s)
    (hmem : ‚àÄ t ‚àà s, Œ± t ‚àà u) :
    ContinuousOn (fun t ‚Ü¶ f t (Œ± t)) s :=
  contDiffOn_zero.mp <| contDiffOn_curve_comp (contDiffOn_zero.mpr hf) (contDiffOn_zero.mpr hŒ±) hmem

-- the integral equation has derivative `fun t ‚Ü¶ f t (Œ± t)`
-- TODO: generalise to any convex `s`
lemma hasDerivAt_iterateIntegral_Ioo [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E) (Œ± : ‚Ñù ‚Üí E) {u : Set E}
    {tmin tmax t‚ÇÄ : ‚Ñù}
    (hf : ContinuousOn (uncurry f) ((Ioo tmin tmax) √óÀ¢ u))
    (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo tmin tmax) (hŒ± : ContinuousOn Œ± (Ioo tmin tmax))
    (hmem : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t ‚àà u) (x‚ÇÄ : E)
    {t : ‚Ñù} (ht : t ‚àà Ioo tmin tmax) :
    HasDerivAt (iterateIntegral f t‚ÇÄ x‚ÇÄ Œ±) (f t (Œ± t)) t := by
  unfold iterateIntegral
  apply HasDerivAt.const_add
  apply intervalIntegral.integral_hasDerivAt_right -- need `CompleteSpace E`
  ¬∑ apply ContinuousOn.intervalIntegrable
    apply continuousOn_curve_comp hf hŒ± hmem |>.mono
    by_cases h : t < t‚ÇÄ
    ¬∑ rw [uIcc_of_gt h]
      exact Icc_subset_Ioo ht.1 ht‚ÇÄ.2
    ¬∑ rw [uIcc_of_le (not_lt.mp h)]
      exact Icc_subset_Ioo ht‚ÇÄ.1 ht.2
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem |>.stronglyMeasurableAtFilter isOpen_Ioo _ ht
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem |>.continuousAt <| Ioo_mem_nhds ht.1 ht.2

-- code duplication with `Ioo` case above
lemma hasDerivWithinAt_iterateIntegral_Icc [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E) (Œ± : ‚Ñù ‚Üí E) {u : Set E}
    {tmin tmax t‚ÇÄ : ‚Ñù}
    (hf : ContinuousOn (uncurry f) ((Icc tmin tmax) √óÀ¢ u))
    (ht‚ÇÄ : t‚ÇÄ ‚àà Icc tmin tmax) (hŒ± : ContinuousOn Œ± (Icc tmin tmax))
    (hmem : ‚àÄ t ‚àà Icc tmin tmax, Œ± t ‚àà u) (x‚ÇÄ : E)
    {t : ‚Ñù} (ht : t ‚àà Icc tmin tmax) :
    HasDerivWithinAt (iterateIntegral f t‚ÇÄ x‚ÇÄ Œ±) (f t (Œ± t)) (Icc tmin tmax) t := by
  unfold iterateIntegral
  apply HasDerivWithinAt.const_add
  have : Fact (t ‚àà Icc tmin tmax) := ‚ü®ht‚ü© -- needed to synthesise FTCFilter for Icc
  apply intervalIntegral.integral_hasDerivWithinAt_right -- need `CompleteSpace E`
  ¬∑ apply ContinuousOn.intervalIntegrable
    apply continuousOn_curve_comp hf hŒ± hmem |>.mono
    by_cases h : t < t‚ÇÄ
    ¬∑ rw [uIcc_of_gt h]
      exact Icc_subset_Icc ht.1 ht‚ÇÄ.2
    ¬∑ rw [uIcc_of_le (not_lt.mp h)]
      exact Icc_subset_Icc ht‚ÇÄ.1 ht.2
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem
      |>.stronglyMeasurableAtFilter_nhdsWithin measurableSet_Icc t
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem _ ht

lemma deriv_iterateIntegral [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E) (Œ± : ‚Ñù ‚Üí E) {u : Set E}
    {tmin tmax t‚ÇÄ : ‚Ñù}
    (hf : ContinuousOn (uncurry f) ((Ioo tmin tmax) √óÀ¢ u))
    (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo tmin tmax) (hŒ± : ContinuousOn Œ± (Ioo tmin tmax))
    (hmem : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t ‚àà u) (x‚ÇÄ : E)
    {t : ‚Ñù} (ht : t ‚àà Ioo tmin tmax) :
    deriv (iterateIntegral f t‚ÇÄ x‚ÇÄ Œ±) t = f t (Œ± t) := by
  -- use FTC2 `intervalIntegral.deriv_integral_right`
  unfold iterateIntegral -- add _eq lemma
  rw [deriv_const_add']
  -- code duplication below this
  apply intervalIntegral.deriv_integral_right
  ¬∑ apply ContinuousOn.intervalIntegrable
    apply continuousOn_curve_comp hf hŒ± hmem |>.mono
    by_cases h : t < t‚ÇÄ
    ¬∑ rw [uIcc_of_gt h]
      exact Icc_subset_Ioo ht.1 ht‚ÇÄ.2
    ¬∑ rw [uIcc_of_le (not_lt.mp h)]
      exact Icc_subset_Ioo ht‚ÇÄ.1 ht.2
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem |>.stronglyMeasurableAtFilter isOpen_Ioo _ ht
  ¬∑ exact continuousOn_curve_comp hf hŒ± hmem |>.continuousAt <| Ioo_mem_nhds ht.1 ht.2

-- the integral equation transfers smoothness class from `f` to `Œ±`
-- TODO: generalise `n` to `‚àû` and maybe `œâ`
lemma contDiffOn_nat_iterateIntegral_Ioo [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E) (Œ± : ‚Ñù ‚Üí E) {u : Set E}
    {tmin tmax t‚ÇÄ : ‚Ñù} {n : ‚Ñï}
    (hf : ContDiffOn ‚Ñù n (uncurry f) ((Ioo tmin tmax) √óÀ¢ u))
    (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo tmin tmax) (hŒ± : ContinuousOn Œ± (Ioo tmin tmax))
    (hmem : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t ‚àà u) (x‚ÇÄ : E)
    (heqon : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t = iterateIntegral f t‚ÇÄ x‚ÇÄ Œ± t) :
    ContDiffOn ‚Ñù n (iterateIntegral f t‚ÇÄ x‚ÇÄ Œ±) (Ioo tmin tmax) := by
  induction n with
  | zero =>
    simp only [CharP.cast_eq_zero, contDiffOn_zero] at *
    apply HasDerivAt.continuousOn (f' := fun t ‚Ü¶ f t (Œ± t))
    intro _ ht
    exact hasDerivAt_iterateIntegral_Ioo f Œ± hf ht‚ÇÄ hŒ± hmem x‚ÇÄ ht
  | succ n hn =>
    simp only [Nat.cast_add, Nat.cast_one] at *
    rw [contDiffOn_succ_iff_deriv_of_isOpen isOpen_Ioo] -- check this for generalisation to `œâ`
    refine ‚ü®?_, by simp, ?_‚ü©
    ¬∑ intro _ ht
      apply DifferentiableAt.differentiableWithinAt
      exact HasDerivAt.differentiableAt <|
        hasDerivAt_iterateIntegral_Ioo f Œ± hf.continuousOn ht‚ÇÄ hŒ± hmem x‚ÇÄ ht
    ¬∑ have hŒ±' : ContDiffOn ‚Ñù n Œ± (Ioo tmin tmax) := by
        apply ContDiffOn.congr _ heqon
        apply hn
        exact hf.of_succ
      apply contDiffOn_curve_comp hf.of_succ hŒ±' hmem |>.congr
      intro _ ht
      exact deriv_iterateIntegral f Œ± hf.continuousOn ht‚ÇÄ hŒ± hmem x‚ÇÄ ht

lemma contDiffOn_enat_iterateIntegral_Ioo [CompleteSpace E] (f : ‚Ñù ‚Üí E ‚Üí E) (Œ± : ‚Ñù ‚Üí E) {u : Set E}
    {tmin tmax t‚ÇÄ : ‚Ñù} {n : ‚Ñï‚àû}
    (hf : ContDiffOn ‚Ñù n (uncurry f) ((Ioo tmin tmax) √óÀ¢ u))
    (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo tmin tmax) (hŒ± : ContinuousOn Œ± (Ioo tmin tmax))
    (hmem : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t ‚àà u) (x‚ÇÄ : E)
    (heqon : ‚àÄ t ‚àà Ioo tmin tmax, Œ± t = iterateIntegral f t‚ÇÄ x‚ÇÄ Œ± t) :
    ContDiffOn ‚Ñù n (iterateIntegral f t‚ÇÄ x‚ÇÄ Œ±) (Ioo tmin tmax) := by
  induction n with
  | top =>
    rw [contDiffOn_infty] at *
    intro k
    exact contDiffOn_nat_iterateIntegral_Ioo _ _ (hf k) ht‚ÇÄ hŒ± hmem x‚ÇÄ heqon
  | coe n =>
    simp only [WithTop.coe_natCast] at *
    exact contDiffOn_nat_iterateIntegral_Ioo _ _ hf ht‚ÇÄ hŒ± hmem _ heqon

-- generalise to `œâ`?

/-
prop 1.1 existence of local flow

J : open interval of ‚Ñù containing 0
  `Ioo tmin tmax` containing 0 (generalise to `t‚ÇÄ`?)
U : open in banach space E containing x‚ÇÄ
  `u ‚àà ùìù x‚ÇÄ`
  but here this is implied by `closedBall x‚ÇÄ (3 * a) ‚äÜ u`
  why `0 < a < 1`?
f : J √ó U ‚Üí E continuous, K-lipschitz
  `f : ‚Ñù ‚Üí E ‚Üí E` with `ContinuousOn (uncurry f) (J √ó U)`,
  `‚àÄ t ‚àà J, LipschitzOnWith (f t) u K`
a : ‚Ñù so that `closedBall x‚ÇÄ (3 * a) ‚äÜ u`
b : ‚Ñù so that eventually we get integral curve Œ± : Ioo (-b) b ‚Üí E
  `b = (tmax - tmin) / 2`
Œ± : Œ±_x (t) is the integral curve starting at x
  `Œ± : E ‚Üí ‚Ñù ‚Üí E` with `Œ± x t` meaning `Œ± x` is an integral curve starting at `x`
-/


-- [MetricSpace Œ±] ‚Üí ContractingWith K f ‚Üí [inst_1 : Nonempty Œ±] ‚Üí [inst : CompleteSpace Œ±] ‚Üí Œ±



/-- The type of continuous maps  -/
-- change order of arguments
-- no need to extend `ContinuousMapClass` because this is a one-time use
@[ext]
structure SpaceOfCurves (u : Set E) (x : E) {t‚ÇÄ tmin tmax : ‚Ñù} (ht‚ÇÄ : t‚ÇÄ ‚àà Icc tmin tmax)
    extends C(Icc tmin tmax, E) where -- `Icc` because we need compact domain
  -- this makes future proof obligations simpler syntactically
  mapsTo : ‚àÄ t : Icc tmin tmax, toFun t ‚àà u -- plug in `u := closedBall x‚ÇÄ (2 * a)` in proofs
  initial : toFun ‚ü®t‚ÇÄ, ht‚ÇÄ‚ü© = x

namespace SpaceOfCurves

section

variable (u : Set E) {x : E} (hx : x ‚àà u) {t‚ÇÄ tmin tmax : ‚Ñù} (ht‚ÇÄ : t‚ÇÄ ‚àà Icc tmin tmax)
  (a : ‚Ñù‚â•0)

-- need `toFun_eq_coe`?

instance : CoeFun (SpaceOfCurves u x ht‚ÇÄ) fun _ ‚Ü¶ Icc tmin tmax ‚Üí E := ‚ü®fun Œ± ‚Ü¶ Œ±.toFun‚ü©

instance : Inhabited (SpaceOfCurves u x ht‚ÇÄ) :=
  ‚ü®‚ü®fun _ ‚Ü¶ x, continuous_const‚ü©, fun _ ‚Ü¶ hx, rfl‚ü©

noncomputable instance : MetricSpace (SpaceOfCurves u x ht‚ÇÄ) :=
  MetricSpace.induced toContinuousMap (fun _ _ _ ‚Ü¶ by ext; congr) inferInstance

omit [NormedSpace ‚Ñù E] in
lemma isUniformInducing : IsUniformInducing fun Œ± : SpaceOfCurves u x ht‚ÇÄ ‚Ü¶ Œ±.toContinuousMap :=
  ‚ü®rfl‚ü©

-- this is where we need `u` closed, e.g. closedBall
-- generalise to all closed `u`?
instance [CompleteSpace E] {x‚ÇÄ : E} {a : ‚Ñù‚â•0} :
    CompleteSpace (SpaceOfCurves (closedBall x‚ÇÄ a) x ht‚ÇÄ) := by
  rw [completeSpace_iff_isComplete_range <| isUniformInducing _ ht‚ÇÄ]
  apply IsClosed.isComplete
  -- abstract this
  have : range (fun Œ± : SpaceOfCurves (closedBall x‚ÇÄ a) x ht‚ÇÄ ‚Ü¶ Œ±.toContinuousMap) =
      { Œ± : C(Icc tmin tmax, E) |
        Œ± ‚ü®t‚ÇÄ, ht‚ÇÄ‚ü© = x ‚àß ‚àÄ t : Icc tmin tmax, Œ± t ‚àà closedBall x‚ÇÄ a } := by
    ext Œ±; constructor
    ¬∑ rintro ‚ü®‚ü®Œ±, hŒ±1, hŒ±2‚ü©, rfl‚ü©
      exact ‚ü®hŒ±2, hŒ±1‚ü©
    ¬∑ rintro ‚ü®hŒ±1, hŒ±2‚ü©
      refine ‚ü®‚ü®Œ±, hŒ±2, hŒ±1‚ü©, rfl‚ü©
  rw [this, setOf_and]
  refine (isClosed_eq (continuous_eval_const _) continuous_const).inter ?_
  have : { Œ± : C(‚Üë(Icc tmin tmax), E) | ‚àÄ (t : ‚Üë(Icc tmin tmax)), Œ± t ‚àà closedBall x‚ÇÄ a } =
      { Œ± : C(‚Üë(Icc tmin tmax), E) | MapsTo Œ± univ (closedBall x‚ÇÄ a) } := by
    simp only [Subtype.forall, mem_Icc, mapsTo_univ_iff]
  rw [this]
  apply isClosed_ball.setOf_mapsTo
  intro t ht
  exact continuous_eval_const _

end

/-- `iterateIntegral` maps `SpaceOfCurves` to `SpaceOfCurves` -/
-- move `Œ±` to target type to simplify proof syntax?
-- abstract components of this?
--   `Œ± ‚àò projIcc`
--   `fun t ‚Ü¶ `
-- generalise to `Icc`
-- generalise to `u` containing ball?
noncomputable def iterate [CompleteSpace E]
    {t‚ÇÄ tmin tmax : ‚Ñù}
    (ht‚ÇÄ : t‚ÇÄ ‚àà Icc tmin tmax)
    {x‚ÇÄ : E}
    {a : ‚Ñù‚â•0}
    (f : ‚Ñù ‚Üí E ‚Üí E)
    -- {K : ‚Ñù‚â•0} (hlip : ‚àÄ t ‚àà Ioo tmin tmax, LipschitzOnWith K (f t) (closedBall x‚ÇÄ (3 * a)))
    {K : ‚Ñù‚â•0} (hlip : ‚àÄ t ‚àà Icc tmin tmax, LipschitzOnWith K (f t) (closedBall x‚ÇÄ (2 * a)))
    -- (hcont : ‚àÄ x' ‚àà closedBall x‚ÇÄ (3 * a), ContinuousOn (f ¬∑ x') (Ioo tmin tmax))
    (hcont : ‚àÄ x' ‚àà closedBall x‚ÇÄ (2 * a), ContinuousOn (f ¬∑ x') (Icc tmin tmax))
    -- {L : ‚Ñù} (hnorm : ‚àÄ t ‚àà Ioo tmin tmax, ‚àÄ x' ‚àà closedBall x‚ÇÄ (3 * a), ‚Äñf t x'‚Äñ ‚â§ L)
    {L : ‚Ñù‚â•0} (hnorm : ‚àÄ t ‚àà Icc tmin tmax, ‚àÄ x' ‚àà closedBall x‚ÇÄ (2 * a), ‚Äñf t x'‚Äñ ‚â§ L)
    (h : L * max (tmax - t‚ÇÄ) (t‚ÇÄ - tmin) ‚â§ a) -- min a L ?
    {x : E} (hx : x ‚àà closedBall x‚ÇÄ a) -- or open ball as in Lang?
    (Œ± : SpaceOfCurves (closedBall x‚ÇÄ (2 * a)) x ht‚ÇÄ) :
    SpaceOfCurves (closedBall x‚ÇÄ (2 * a)) x ht‚ÇÄ :=
  { toFun := iterateIntegral f t‚ÇÄ x (Œ± ‚àò (projIcc _ _ (le_trans ht‚ÇÄ.1 ht‚ÇÄ.2))) ‚àò Subtype.val
    continuous_toFun := by
      apply ContinuousOn.comp_continuous _ continuous_subtype_val Subtype.coe_prop
      intro t ht
      have : ContinuousOn (uncurry f) (Icc tmin tmax √óÀ¢ (closedBall x‚ÇÄ (2 * a))) :=
        have : ContinuousOn (uncurry (flip f)) (closedBall x‚ÇÄ (2 * a) √óÀ¢ Icc tmin tmax) :=
          continuousOn_prod_of_continuousOn_lipschitzOnWith _ K hcont hlip
        this.comp continuous_swap.continuousOn (preimage_swap_prod _ _).symm.subset
      apply hasDerivWithinAt_iterateIntegral_Icc
        f (Œ± ‚àò (projIcc _ _ (le_trans ht‚ÇÄ.1 ht‚ÇÄ.2))) this ht‚ÇÄ _ _ _ ht |>.continuousWithinAt
      ¬∑ exact Œ±.continuous_toFun.comp_continuousOn continuous_projIcc.continuousOn
      ¬∑ intro t' ht' -- why need to be `3 * a`?
        rw [comp_apply]
        apply mem_of_mem_of_subset (Œ±.mapsTo _) (closedBall_subset_closedBall _)
        apply mul_le_mul_of_nonneg_right (by norm_num) a.2
    mapsTo := by
      intro t
      dsimp only
      rw [comp_apply, iterateIntegral_apply, mem_closedBall,
        dist_eq_norm_sub, add_comm, add_sub_assoc]
      calc
        ‚Äñ_ + (x - x‚ÇÄ)‚Äñ ‚â§ ‚Äñ_‚Äñ + ‚Äñx - x‚ÇÄ‚Äñ := norm_add_le _ _
        _ ‚â§ ‚Äñ_‚Äñ + a := add_le_add_left (mem_closedBall_iff_norm.mp hx) _
        _ = ‚Äñ‚à´ œÑ in Œô t‚ÇÄ t, f œÑ ((Œ± ‚àò projIcc _ _ (le_trans ht‚ÇÄ.1 ht‚ÇÄ.2)) œÑ)‚Äñ + a := by
          rw [intervalIntegral.norm_intervalIntegral_eq]
        _ ‚â§ L * ((volume.restrict (Œô t‚ÇÄ ‚Üët)) univ).toReal + a := by
          apply add_le_add_right
          have : IsFiniteMeasure (volume.restrict (Œô t‚ÇÄ ‚Üët)) := by -- missing lemma?
            rw [uIoc_eq_union]
            exact isFiniteMeasure_of_le _ <| Measure.restrict_union_le _ _
          apply norm_integral_le_of_norm_le_const
          apply (ae_restrict_mem measurableSet_Ioc).mono
          intro t' ht'
          apply hnorm
          ¬∑ rw [mem_Ioc, inf_lt_iff, le_sup_iff, or_and_right, and_or_left, ‚Üê not_lt,
              and_not_self_iff, false_or, and_or_left, ‚Üê not_lt (b := t'), and_not_self_iff,
              or_false, not_lt, not_lt] at ht'
            cases ht' with
            | inl ht' => exact ‚ü®le_of_lt <| lt_of_le_of_lt ht‚ÇÄ.1 ht'.1, le_trans ht'.2 t.2.2‚ü©
            | inr ht' => exact ‚ü®le_of_lt <| lt_of_le_of_lt t.2.1 ht'.1, le_trans ht'.2 ht‚ÇÄ.2‚ü©
          ¬∑ rw [comp_apply]
            apply mem_of_mem_of_subset (Œ±.mapsTo _) (closedBall_subset_closedBall _)
            rfl
        _ = L * |t - t‚ÇÄ| + a := by
          congr
          rw [Measure.restrict_apply MeasurableSet.univ, univ_inter]
          by_cases ht : t‚ÇÄ < t
          ¬∑ rw [uIoc_of_le <| le_of_lt ht, Real.volume_Ioc,
              ENNReal.toReal_ofReal <| le_of_lt <| sub_pos_of_lt ht,
              abs_eq_self.mpr <| le_of_lt <| sub_pos_of_lt ht]
          ¬∑ rw [uIoc_of_ge <| not_lt.mp ht, Real.volume_Ioc,
              ENNReal.toReal_ofReal <| sub_nonneg_of_le <| not_lt.mp ht,
              abs_eq_neg_self.mpr <| sub_nonpos_of_le <| not_lt.mp ht, neg_sub]
        _ ‚â§ L * max (tmax - t‚ÇÄ) (t‚ÇÄ - tmin) + a := by
          apply add_le_add_right
          apply mul_le_mul_of_nonneg le_rfl _ L.2
          ¬∑ rw [le_max_iff]
            apply Or.inl
            exact sub_nonneg_of_le ht‚ÇÄ.2
          ¬∑ rw [le_max_iff]
            by_cases ht : t‚ÇÄ < t
            ¬∑ rw [abs_eq_self.mpr <| le_of_lt <| sub_pos_of_lt ht]
              apply Or.inl
              apply sub_le_sub_right
              exact t.2.2
            ¬∑ rw [abs_eq_neg_self.mpr <| sub_nonpos_of_le <| not_lt.mp ht, neg_sub]
              apply Or.inr
              apply sub_le_sub_left
              exact t.2.1
        _ ‚â§ a + a := add_le_add_right h _
        _ = 2 * a := (two_mul _).symm
    initial := by simp only [ContinuousMap.toFun_eq_coe, comp_apply, iterateIntegral_apply,
        intervalIntegral.integral_same, add_zero] }

end SpaceOfCurves



-- K is NNReal because of LipschitzOnWith
-- prop 1.1 is stated strangely at the end
-- theorem exist_localFlow {tmin tmax L a b : ‚Ñù} {u : Set E} {x‚ÇÄ : E} (hu : closedBall x‚ÇÄ (3 * a) ‚äÜ u)
--     {f : ‚Ñù ‚Üí E ‚Üí E} {K : ‚Ñù‚â•0} (hb : 0 < b)
--     (hcont‚ÇÅ : ‚àÄ x ‚àà u, ContinuousOn (f ¬∑ x) (Ioo tmin tmax))
--     (hcont‚ÇÇ : ‚àÄ t ‚àà Ioo tmin tmax, ContinuousOn (f t) u)
--     (hle : ‚àÄ t ‚àà Ioo tmin tmax, ‚àÄ x ‚àà u, ‚Äñf t x‚Äñ ‚â§ L)
--     (hlip : ‚àÄ t ‚àà Ioo tmin tmax, LipschitzOnWith K (f t) u)
--     (hlt : b * L * K < a) :
--   ‚àÉ Œ± : E ‚Üí ‚Ñù ‚Üí E, ‚àÄ x ‚àà closedBall x‚ÇÄ a, Œ± x 0 = x ‚àß
--     ‚àÄ t ‚àà Ioo (-b) b, Œ± x t ‚àà u ‚àß HasDerivAt (Œ± x) (f t (Œ± x t)) t := sorry

-- corollary: existence of a single integral curve

theorem exist_localIntegralCurve {tmin tmax L a b : ‚Ñù} {u : Set E} {x‚ÇÄ : E}
    (hu : closedBall x‚ÇÄ (3 * a) ‚äÜ u)
    {f : ‚Ñù ‚Üí E ‚Üí E} {K : ‚Ñù‚â•0} (hb : 0 < b)
    (hcont‚ÇÅ : ‚àÄ x ‚àà u, ContinuousOn (f ¬∑ x) (Ioo tmin tmax))
    (hcont‚ÇÇ : ‚àÄ t ‚àà Ioo tmin tmax, ContinuousOn (f t) u)
    (hle : ‚àÄ t ‚àà Ioo tmin tmax, ‚àÄ x ‚àà u, ‚Äñf t x‚Äñ ‚â§ L)
    (hlip : ‚àÄ t ‚àà Ioo tmin tmax, LipschitzOnWith K (f t) u)
    (hlt : b * L * K < a) {x : E} (hx : x ‚àà closedBall x‚ÇÄ a) :
  ‚àÉ Œ± : ‚Ñù ‚Üí E, Œ± 0 = x ‚àß
    ‚àÄ t ‚àà Ioo (-b) b, Œ± t ‚àà u ‚àß HasDerivAt Œ± (f t (Œ± t)) t := sorry

-- provide the unique fixed point using `fixedPoint`
