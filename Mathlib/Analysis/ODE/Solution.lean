/-
Copyright (c) 2024 Winston Yin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Winston Yin
-/
import Mathlib.Analysis.SpecialFunctions.Integrals
import Mathlib.Topology.MetricSpace.Contracting

open Function Metric Set Topology
open MeasureTheory.MeasureSpace (volume)
open scoped NNReal ENNReal

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]

-- this will be proven to be unique on s under conditions on `v` and `s`
structure ODESolution (v : ‚Ñù ‚Üí E ‚Üí E) (t‚ÇÄ : ‚Ñù) (s : Set ‚Ñù) (x‚ÇÄ : E) where
  toFun : ‚Ñù ‚Üí E
  isConnected_domain : IsConnected s -- all intervals or singleton
  mem_domain : t‚ÇÄ ‚àà s
  initial : toFun t‚ÇÄ = x‚ÇÄ
  hasDerivWithinAt : ‚àÄ t ‚àà s, HasDerivWithinAt toFun (v t (toFun t)) s t

def LocalFlow (v : ‚Ñù ‚Üí E ‚Üí E) (t‚ÇÄ : ‚Ñù) (s : Set ‚Ñù) (u : Set E) :=
  (x‚ÇÄ : E) ‚Üí (hx : x‚ÇÄ ‚àà u) ‚Üí ODESolution v t‚ÇÄ s x‚ÇÄ

/-- `Prop` structure holding the hypotheses of the Picard-Lindel√∂f theorem.

The similarly named `PicardLindelof` structure is part of the internal API for convenience, so as
not to constantly invoke choice, but is not intended for public use. -/
structure IsPicardLindelof {E : Type*} [NormedAddCommGroup E] (v : ‚Ñù ‚Üí E ‚Üí E) (tMin t‚ÇÄ tMax : ‚Ñù)
    (x‚ÇÄ : E) (L : ‚Ñù‚â•0) (R C : ‚Ñù) : Prop where
  ht‚ÇÄ : t‚ÇÄ ‚àà Icc tMin tMax
  hR : 0 ‚â§ R
  lipschitz : ‚àÄ t ‚àà Icc tMin tMax, LipschitzOnWith L (v t) (closedBall x‚ÇÄ R)
  cont : ‚àÄ x ‚àà closedBall x‚ÇÄ R, ContinuousOn (fun t : ‚Ñù => v t x) (Icc tMin tMax)
  norm_le : ‚àÄ t ‚àà Icc tMin tMax, ‚àÄ x ‚àà closedBall x‚ÇÄ R, ‚Äñv t x‚Äñ ‚â§ C
  C_mul_le_R : (C : ‚Ñù) * max (tMax - t‚ÇÄ) (t‚ÇÄ - tMin) ‚â§ R

/-- This structure holds arguments of the Picard-Lipschitz (Cauchy-Lipschitz) theorem. It is part of
the internal API for convenience, so as not to constantly invoke choice. Unless you want to use one
of the auxiliary lemmas, use `IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq` instead
of using this structure.

The similarly named `IsPicardLindelof` is a bundled `Prop` holding the long hypotheses of the
Picard-Lindel√∂f theorem as named arguments. It is used as part of the public API.
-/
structure PicardLindelofData (E : Type*) [NormedAddCommGroup E] [NormedSpace ‚Ñù E] where
  toFun : ‚Ñù ‚Üí E ‚Üí E
  (t‚ÇÄ tmin tmax : ‚Ñù)
  ht‚ÇÄ : t‚ÇÄ ‚àà Icc tmin tmax
  x‚ÇÄ : E
  (C R L : ‚Ñù‚â•0)
  isPicardLindelof : IsPicardLindelof toFun tmin t‚ÇÄ tmax x‚ÇÄ L R C

namespace PicardLindelofData

variable (v : PicardLindelofData E)

instance : CoeFun (PicardLindelofData E) fun _ ‚Ü¶ ‚Ñù ‚Üí E ‚Üí E := ‚ü®toFun‚ü©

instance : Inhabited (PicardLindelofData E) :=
  ‚ü®‚ü®0, 0, 0, 0, ‚ü®le_rfl, le_rfl‚ü©, 0, 0, 0, 0,
      { ht‚ÇÄ := by rw [Icc_self]; exact mem_singleton _
        hR := le_rfl
        lipschitz := fun _ _ => (LipschitzWith.const 0).lipschitzOnWith
        cont := fun _ _ => by simpa only [Pi.zero_apply] using continuousOn_const
        norm_le := fun _ _ _ _ => norm_zero.le
        C_mul_le_R := (zero_mul _).le }‚ü©‚ü©

-- convenience lemmas
lemma tmin_le_tmax : v.tmin ‚â§ v.tmax := v.ht‚ÇÄ.1.trans v.ht‚ÇÄ.2

-- lemma nonempty_Icc

-- lemma lipschitzOnWith

lemma continuousOn_Icc_prod_closedBall :
    ContinuousOn (uncurry v) (Icc v.tmin v.tmax √óÀ¢ closedBall v.x‚ÇÄ v.R) :=
  have : ContinuousOn (uncurry (flip v)) (closedBall v.x‚ÇÄ v.R √óÀ¢ Icc v.tmin v.tmax) :=
    continuousOn_prod_of_continuousOn_lipschitzOnWith _ v.L v.isPicardLindelof.cont
      v.isPicardLindelof.lipschitz
  this.comp continuous_swap.continuousOn (preimage_swap_prod _ _).symm.subset

-- why closedBall? able to extend to boundary?
-- this can be derived from lipschitz condition on f
lemma continuousOn_Icc {f : ‚Ñù ‚Üí E} (hcont : ContinuousOn f (Icc v.tmin v.tmax))
    (hball : ‚àÄ t ‚àà Icc v.tmin v.tmax, f t ‚àà closedBall v.x‚ÇÄ v.R) :
    ContinuousOn (fun t ‚Ü¶ v t (f t)) (Icc v.tmin v.tmax) := by
  have : (fun t ‚Ü¶ v t (f t)) = (uncurry v) ‚àò fun t ‚Ü¶ (t, (f t)) := rfl
  rw [this]
  apply v.continuousOn_Icc_prod_closedBall.comp <| continuousOn_id.prod hcont
  intro t ht
  exact ‚ü®ht, hball t ht‚ü©

lemma intervalIntegrable {f : ‚Ñù ‚Üí E} (hcont : ContinuousOn f (Icc v.tmin v.tmax))
    (hball : ‚àÄ t ‚àà Icc v.tmin v.tmax, f t ‚àà closedBall v.x‚ÇÄ v.R) {t‚ÇÅ t‚ÇÇ : ‚Ñù}
    (ht‚ÇÅ : t‚ÇÅ ‚àà Icc v.tmin v.tmax) (ht‚ÇÇ : t‚ÇÇ ‚àà Icc v.tmin v.tmax) :
    IntervalIntegrable (fun t ‚Ü¶ v t (f t)) volume t‚ÇÅ t‚ÇÇ :=
  v.continuousOn_Icc hcont hball |>.mono (uIcc_subset_Icc ht‚ÇÅ ht‚ÇÇ) |>.intervalIntegrable

lemma stronglyMeasurableAtFilter {f : ‚Ñù ‚Üí E} (hcont : ContinuousOn f (Icc v.tmin v.tmax))
    (hball : ‚àÄ t ‚àà Icc v.tmin v.tmax, f t ‚àà closedBall v.x‚ÇÄ v.R) {t : ‚Ñù} :
    StronglyMeasurableAtFilter (fun t ‚Ü¶ v t (f t)) (ùìù[Icc v.tmin v.tmax] t) volume :=
  v.continuousOn_Icc hcont hball |>.stronglyMeasurableAtFilter_nhdsWithin measurableSet_Icc _

def odesolutionOfIntegral [CompleteSpace E] {f : ‚Ñù ‚Üí E} (hcont : ContinuousOn f (Icc v.tmin v.tmax))
    (hball : ‚àÄ t ‚àà Icc v.tmin v.tmax, f t ‚àà closedBall v.x‚ÇÄ v.R)
    (hf : ‚àÄ t ‚àà Icc v.tmin v.tmax, f t = v.x‚ÇÄ + ‚à´ œÑ in v.t‚ÇÄ..t, v œÑ (f œÑ)) :
    ODESolution v v.t‚ÇÄ (Icc v.tmin v.tmax) v.x‚ÇÄ where
  toFun := f
  isConnected_domain := isConnected_Icc v.tmin_le_tmax
  mem_domain := v.ht‚ÇÄ
  initial := by simpa using hf v.t‚ÇÄ v.ht‚ÇÄ
  hasDerivWithinAt t ht := by
    refine HasDerivWithinAt.congr ?_ hf (hf t ht)
    apply HasDerivWithinAt.const_add
    haveI : Fact (t ‚àà Icc v.tmin v.tmax) := ‚ü®ht‚ü©
    exact intervalIntegral.integral_hasDerivWithinAt_right
      (v.intervalIntegrable hcont hball v.ht‚ÇÄ ht)
      (v.stronglyMeasurableAtFilter hcont hball)
      (v.continuousOn_Icc hcont hball t ht)

end PicardLindelofData
