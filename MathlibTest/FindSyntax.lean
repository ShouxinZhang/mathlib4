import Mathlib.Tactic.FindSyntax

/--
info: Found 1 use among over 500 syntax declarations
---

«term_∘_»: defined in 'Init.Notation'
start: ⟨272, 0⟩, end: ⟨272, 48⟩
  '∘'

---
-/
#guard_msgs in
#find_syntax "∘" approx  -- an `infixr`

/--
info: Found 1 use among over 500 syntax declarations
---

«term_∣_»: defined in 'Init.Notation'
start: ⟨276, 0⟩, end: ⟨276, 41⟩
  '∣'

---
-/
#guard_msgs in
#find_syntax "∣" approx  -- an `infix`

/--
info: Found 2 uses among over 500 syntax declarations
---

«stx_,*,?»: defined in 'Init.Notation'
start: ⟨242, 0⟩, end: ⟨242, 82⟩
  ',*,?'

---

«stx_,*»: defined in 'Init.Notation'
start: ⟨224, 0⟩, end: ⟨224, 64⟩
  ',*'

---
-/
#guard_msgs in
#find_syntax ",*" approx  -- generated by a `macro`

/--
info: Found 1 use among over 500 syntax declarations
---

«term~~~_»: defined in 'Init.Notation'
start: ⟨290, 0⟩, end: ⟨290, 57⟩
  '~~~'

---
-/
#guard_msgs in
#find_syntax "~~~" approx  -- a `prefix`

/--
info: Found 4 uses among over 500 syntax declarations
---

Lean.Parser.Tactic.refine': defined in 'Init.Tactics'
start: ⟨212, 0⟩, end: ⟨216, 49⟩
  'refine''

---

Lean.Parser.Tactic.refine: defined in 'Init.Tactics'
start: ⟨205, 0⟩, end: ⟨210, 47⟩
  'refine'

---

Lean.Parser.Tactic.tacticRefine_lift'_: defined in 'Init.Tactics'
start: ⟨797, 0⟩, end: ⟨797, 104⟩
  'refine_lift''

---

Lean.Parser.Tactic.tacticRefine_lift_: defined in 'Init.Tactics'
start: ⟨720, 0⟩, end: ⟨720, 102⟩
  'refine_lift'

---
-/
#guard_msgs in
#find_syntax "refine" approx  -- a `nonReservedSymbol`
